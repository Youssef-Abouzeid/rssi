
RSSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed4  08002ed4  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002ed4  08002ed4  00003ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002edc  08002edc  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002edc  08002edc  00003edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ee0  08002ee0  00003ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002ee4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000068  08002f4c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08002f4c  00004230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ec4  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ac  00000000  00000000  00009f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f7  00000000  00000000  0000bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016086  00000000  00000000  0000bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008624  00000000  00000000  00022045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f2c  00000000  00000000  0002a669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e4  00000000  00000000  000b05d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000b27bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002e48 	.word	0x08002e48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002e48 	.word	0x08002e48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <CC1352_CheckChannelClear>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool CC1352_CheckChannelClear(int8_t *rssi) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
    uint8_t tx_buf[4] = {0x03, 0x24, 0x00, 0x00}; // LSB-first 0x2403
 8000578:	f242 4303 	movw	r3, #9219	@ 0x2403
 800057c:	613b      	str	r3, [r7, #16]
    uint8_t rx_buf[4] = {0};
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low
 8000582:	2200      	movs	r2, #0
 8000584:	2110      	movs	r1, #16
 8000586:	4814      	ldr	r0, [pc, #80]	@ (80005d8 <CC1352_CheckChannelClear+0x68>)
 8000588:	f000 fd84 	bl	8001094 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, 4, HAL_MAX_DELAY);
 800058c:	f107 020c 	add.w	r2, r7, #12
 8000590:	f107 0110 	add.w	r1, r7, #16
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2304      	movs	r3, #4
 800059c:	480f      	ldr	r0, [pc, #60]	@ (80005dc <CC1352_CheckChannelClear+0x6c>)
 800059e:	f001 fa40 	bl	8001a22 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS High
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <CC1352_CheckChannelClear+0x68>)
 80005a8:	f000 fd74 	bl	8001094 <HAL_GPIO_WritePin>

    uint32_t cmdsta = (rx_buf[3] << 8) | rx_buf[2];
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	7bba      	ldrb	r2, [r7, #14]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	617b      	str	r3, [r7, #20]
    *rssi = (cmdsta >> 16) & 0xFF;      // RSSI (if busy)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	0c1b      	lsrs	r3, r3, #16
 80005ba:	b25a      	sxtb	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]
    return !(cmdsta & 0x01);            // Bit 0 = 0 → channel clear
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020000 	.word	0x40020000
 80005dc:	20000084 	.word	0x20000084

080005e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e6:	f000 fa55 	bl	8000a94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ea:	f000 f81f 	bl	800062c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ee:	f000 f8b3 	bl	8000758 <MX_GPIO_Init>
	MX_SPI1_Init();
 80005f2:	f000 f87b 	bl	80006ec <MX_SPI1_Init>
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		int8_t cca_rssi;
		if (CC1352_CheckChannelClear(&cca_rssi)) {
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffb9 	bl	8000570 <CC1352_CheckChannelClear>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <main+0x2c>
			printf("Channel is clear!\n");
 8000604:	4807      	ldr	r0, [pc, #28]	@ (8000624 <main+0x44>)
 8000606:	f001 fdbb 	bl	8002180 <puts>
 800060a:	e005      	b.n	8000618 <main+0x38>
		} else {
			printf("Channel busy! RSSI: %d dBm\n", cca_rssi);
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	4619      	mov	r1, r3
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <main+0x48>)
 8000614:	f001 fd4c 	bl	80020b0 <iprintf>
		}

		HAL_Delay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800061c:	f000 faac 	bl	8000b78 <HAL_Delay>
	{
 8000620:	e7e9      	b.n	80005f6 <main+0x16>
 8000622:	bf00      	nop
 8000624:	08002e60 	.word	0x08002e60
 8000628:	08002e74 	.word	0x08002e74

0800062c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fe80 	bl	8002340 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <SystemClock_Config+0xb8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <SystemClock_Config+0xbc>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fd11 	bl	80010c8 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x84>
	{
		Error_Handler();
 80006ac:	f000 f86e 	bl	800078c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ff74 	bl	80015b8 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xae>
	{
		Error_Handler();
 80006d6:	f000 f859 	bl	800078c <Error_Handler>
	}
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_SPI1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <MX_SPI1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006fc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_SPI1_Init+0x64>)
 800073e:	f001 f8e7 	bl	8001910 <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000748:	f000 f820 	bl	800078c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000084 	.word	0x20000084
 8000754:	40013000 	.word	0x40013000

08000758 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_GPIO_Init+0x30>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a08      	ldr	r2, [pc, #32]	@ (8000788 <MX_GPIO_Init+0x30>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_GPIO_Init+0x30>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800

0800078c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <Error_Handler+0x8>

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a19      	ldr	r2, [pc, #100]	@ (800086c <HAL_SPI_MspInit+0x84>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12b      	bne.n	8000862 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <HAL_SPI_MspInit+0x88>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <HAL_SPI_MspInit+0x88>)
 8000814:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000818:	6453      	str	r3, [r2, #68]	@ 0x44
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_SPI_MspInit+0x88>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <HAL_SPI_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <HAL_SPI_MspInit+0x88>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <HAL_SPI_MspInit+0x88>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000842:	23e0      	movs	r3, #224	@ 0xe0
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000852:	2305      	movs	r3, #5
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <HAL_SPI_MspInit+0x8c>)
 800085e:	f000 fa95 	bl	8000d8c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	@ 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40013000 	.word	0x40013000
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f933 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e00a      	b.n	80008fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008e8:	f3af 8000 	nop.w
 80008ec:	4601      	mov	r1, r0
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	b2ca      	uxtb	r2, r1
 80008f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbf0      	blt.n	80008e8 <_read+0x12>
  }

  return len;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e009      	b.n	8000936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	60ba      	str	r2, [r7, #8]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	dbf1      	blt.n	8000922 <_write+0x12>
  }
  return len;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_close>:

int _close(int file)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000970:	605a      	str	r2, [r3, #4]
  return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_isatty>:

int _isatty(int file)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000996:	b480      	push	{r7}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f001 fcfc 	bl	80023dc <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20010000 	.word	0x20010000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	20000230 	.word	0x20000230

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a44:	f7ff ffea 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f001 fcbb 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fdb5 	bl	80005e0 <main>
  bx  lr    
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a84:	08002ee4 	.word	0x08002ee4
  ldr r2, =_sbss
 8000a88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a8c:	20000230 	.word	0x20000230

08000a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <HAL_Init+0x40>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_Init+0x40>)
 8000aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_Init+0x40>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f931 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe66 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023c00 	.word	0x40023c00

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f93b 	bl	8000d72 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f911 	bl	8000d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200000e0 	.word	0x200000e0

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200000e0 	.word	0x200000e0

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	@ (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	@ (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	@ 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff47 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff5c 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff8e 	bl	8000c78 <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffb0 	bl	8000ce0 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e159      	b.n	800105c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	f040 8148 	bne.w	8001056 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d005      	beq.n	8000dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d130      	bne.n	8000e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d017      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d123      	bne.n	8000ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	69b9      	ldr	r1, [r7, #24]
 8000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0203 	and.w	r2, r3, #3
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80a2 	beq.w	8001056 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b57      	ldr	r3, [pc, #348]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a56      	ldr	r2, [pc, #344]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b54      	ldr	r3, [pc, #336]	@ (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	4a52      	ldr	r2, [pc, #328]	@ (8001078 <HAL_GPIO_Init+0x2ec>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a49      	ldr	r2, [pc, #292]	@ (800107c <HAL_GPIO_Init+0x2f0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x202>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a48      	ldr	r2, [pc, #288]	@ (8001080 <HAL_GPIO_Init+0x2f4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x1fe>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a47      	ldr	r2, [pc, #284]	@ (8001084 <HAL_GPIO_Init+0x2f8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a46      	ldr	r2, [pc, #280]	@ (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a45      	ldr	r2, [pc, #276]	@ (800108c <HAL_GPIO_Init+0x300>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x1f2>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	@ (8001078 <HAL_GPIO_Init+0x2ec>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001026:	4a1a      	ldr	r2, [pc, #104]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HAL_GPIO_Init+0x304>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001050:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <HAL_GPIO_Init+0x304>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f aea2 	bls.w	8000da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40013c00 	.word	0x40013c00

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	041a      	lsls	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	619a      	str	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e267      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d075      	beq.n	80011d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e6:	4b88      	ldr	r3, [pc, #544]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d00c      	beq.n	800110c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f2:	4b85      	ldr	r3, [pc, #532]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d112      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fe:	4b82      	ldr	r3, [pc, #520]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800110a:	d10b      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	4b7e      	ldr	r3, [pc, #504]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d05b      	beq.n	80011d0 <HAL_RCC_OscConfig+0x108>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d157      	bne.n	80011d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e242      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800112c:	d106      	bne.n	800113c <HAL_RCC_OscConfig+0x74>
 800112e:	4b76      	ldr	r3, [pc, #472]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a75      	ldr	r2, [pc, #468]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e01d      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x98>
 8001146:	4b70      	ldr	r3, [pc, #448]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a6f      	ldr	r2, [pc, #444]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b6d      	ldr	r3, [pc, #436]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a6c      	ldr	r2, [pc, #432]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e00b      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 8001160:	4b69      	ldr	r3, [pc, #420]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a68      	ldr	r2, [pc, #416]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b66      	ldr	r3, [pc, #408]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a65      	ldr	r2, [pc, #404]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fcee 	bl	8000b60 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fcea 	bl	8000b60 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	@ 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e207      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b5b      	ldr	r3, [pc, #364]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0xc0>
 80011a6:	e014      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcda 	bl	8000b60 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcd6 	bl	8000b60 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	@ 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1f3      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	4b51      	ldr	r3, [pc, #324]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0xe8>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d063      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011de:	4b4a      	ldr	r3, [pc, #296]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	4b47      	ldr	r3, [pc, #284]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d11c      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b44      	ldr	r3, [pc, #272]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d116      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	4b41      	ldr	r3, [pc, #260]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e1c7      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4937      	ldr	r1, [pc, #220]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	e03a      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001238:	4b34      	ldr	r3, [pc, #208]	@ (800130c <HAL_RCC_OscConfig+0x244>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fc8f 	bl	8000b60 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc8b 	bl	8000b60 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e1a8      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4925      	ldr	r1, [pc, #148]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <HAL_RCC_OscConfig+0x244>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fc6e 	bl	8000b60 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fc6a 	bl	8000b60 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e187      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d036      	beq.n	8001320 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d016      	beq.n	80012e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_RCC_OscConfig+0x248>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc4e 	bl	8000b60 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc4a 	bl	8000b60 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e167      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_RCC_OscConfig+0x240>)
 80012dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x200>
 80012e6:	e01b      	b.n	8001320 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_RCC_OscConfig+0x248>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fc37 	bl	8000b60 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	e00e      	b.n	8001314 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fc33 	bl	8000b60 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d907      	bls.n	8001314 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e150      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
 8001310:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b88      	ldr	r3, [pc, #544]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ea      	bne.n	80012f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 8097 	beq.w	800145c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b81      	ldr	r3, [pc, #516]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b7d      	ldr	r3, [pc, #500]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a7c      	ldr	r2, [pc, #496]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b7a      	ldr	r3, [pc, #488]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b77      	ldr	r3, [pc, #476]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d118      	bne.n	800139c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b74      	ldr	r3, [pc, #464]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a73      	ldr	r2, [pc, #460]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fbf3 	bl	8000b60 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137e:	f7ff fbef 	bl	8000b60 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e10c      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <HAL_RCC_OscConfig+0x474>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2ea>
 80013a4:	4b64      	ldr	r3, [pc, #400]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a63      	ldr	r2, [pc, #396]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b0:	e01c      	b.n	80013ec <HAL_RCC_OscConfig+0x324>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x30c>
 80013ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013be:	4a5e      	ldr	r2, [pc, #376]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0x324>
 80013d4:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d8:	4a57      	ldr	r2, [pc, #348]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e0:	4b55      	ldr	r3, [pc, #340]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e4:	4a54      	ldr	r2, [pc, #336]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f023 0304 	bic.w	r3, r3, #4
 80013ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d015      	beq.n	8001420 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fbb4 	bl	8000b60 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fbb0 	bl	8000b60 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0cb      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001412:	4b49      	ldr	r3, [pc, #292]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ee      	beq.n	80013fc <HAL_RCC_OscConfig+0x334>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fb9e 	bl	8000b60 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fb9a 	bl	8000b60 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0b5      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143e:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1ee      	bne.n	8001428 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001450:	4b39      	ldr	r3, [pc, #228]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a1 	beq.w	80015a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b08      	cmp	r3, #8
 8001470:	d05c      	beq.n	800152c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d141      	bne.n	80014fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <HAL_RCC_OscConfig+0x478>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fb6e 	bl	8000b60 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fb6a 	bl	8000b60 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e087      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	3b01      	subs	r3, #1
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	491b      	ldr	r1, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_RCC_OscConfig+0x478>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fb43 	bl	8000b60 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fb3f 	bl	8000b60 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e05c      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x416>
 80014fc:	e054      	b.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_RCC_OscConfig+0x478>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb2c 	bl	8000b60 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fb28 	bl	8000b60 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e045      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_RCC_OscConfig+0x470>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x444>
 800152a:	e03d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e038      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	40007000 	.word	0x40007000
 8001540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_RCC_OscConfig+0x4ec>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d028      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d121      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d11a      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001574:	4013      	ands	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800157a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800157c:	4293      	cmp	r3, r2
 800157e:	d111      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	3b01      	subs	r3, #1
 800158e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0cc      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b68      	ldr	r3, [pc, #416]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d90c      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b65      	ldr	r3, [pc, #404]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0b8      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160c:	4b59      	ldr	r3, [pc, #356]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a58      	ldr	r2, [pc, #352]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001624:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a52      	ldr	r2, [pc, #328]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800162e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001630:	4b50      	ldr	r3, [pc, #320]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	494d      	ldr	r1, [pc, #308]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d044      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d119      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e07f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d003      	beq.n	8001676 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001672:	2b03      	cmp	r3, #3
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e067      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b37      	ldr	r3, [pc, #220]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4934      	ldr	r1, [pc, #208]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a8:	f7ff fa5a 	bl	8000b60 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff fa56 	bl	8000b60 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d20c      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e032      	b.n	8001766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4916      	ldr	r1, [pc, #88]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	490e      	ldr	r1, [pc, #56]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173e:	f000 f821 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8001742:	4602      	mov	r2, r0
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	490a      	ldr	r1, [pc, #40]	@ (8001778 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	5ccb      	ldrb	r3, [r1, r3]
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	4a09      	ldr	r2, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_RCC_ClockConfig+0x1c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f9ba 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00
 8001774:	40023800 	.word	0x40023800
 8001778:	08002e90 	.word	0x08002e90
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001788:	b090      	sub	sp, #64	@ 0x40
 800178a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800179c:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d00d      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x40>
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	f200 80a1 	bhi.w	80018f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x34>
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x3a>
 80017b6:	e09b      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x184>)
 80017ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017bc:	e09b      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017be:	4b53      	ldr	r3, [pc, #332]	@ (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017c2:	e098      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d028      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	4b4a      	ldr	r3, [pc, #296]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	2200      	movs	r2, #0
 80017e2:	623b      	str	r3, [r7, #32]
 80017e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017ec:	2100      	movs	r1, #0
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017f0:	fb03 f201 	mul.w	r2, r3, r1
 80017f4:	2300      	movs	r3, #0
 80017f6:	fb00 f303 	mul.w	r3, r0, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	4a43      	ldr	r2, [pc, #268]	@ (800190c <HAL_RCC_GetSysClockFreq+0x188>)
 80017fe:	fba0 1202 	umull	r1, r2, r0, r2
 8001802:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001804:	460a      	mov	r2, r1
 8001806:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800180a:	4413      	add	r3, r2
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800180e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001810:	2200      	movs	r2, #0
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	61fa      	str	r2, [r7, #28]
 8001816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800181a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800181e:	f7fe fd2f 	bl	8000280 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4613      	mov	r3, r2
 8001828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800182a:	e053      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	2200      	movs	r2, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	617a      	str	r2, [r7, #20]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800183e:	f04f 0b00 	mov.w	fp, #0
 8001842:	4652      	mov	r2, sl
 8001844:	465b      	mov	r3, fp
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0159      	lsls	r1, r3, #5
 8001850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001854:	0150      	lsls	r0, r2, #5
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ebb2 080a 	subs.w	r8, r2, sl
 800185e:	eb63 090b 	sbc.w	r9, r3, fp
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800186e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001872:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001876:	ebb2 0408 	subs.w	r4, r2, r8
 800187a:	eb63 0509 	sbc.w	r5, r3, r9
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	00eb      	lsls	r3, r5, #3
 8001888:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800188c:	00e2      	lsls	r2, r4, #3
 800188e:	4614      	mov	r4, r2
 8001890:	461d      	mov	r5, r3
 8001892:	eb14 030a 	adds.w	r3, r4, sl
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	eb45 030b 	adc.w	r3, r5, fp
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018aa:	4629      	mov	r1, r5
 80018ac:	028b      	lsls	r3, r1, #10
 80018ae:	4621      	mov	r1, r4
 80018b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b4:	4621      	mov	r1, r4
 80018b6:	028a      	lsls	r2, r1, #10
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018be:	2200      	movs	r2, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	60fa      	str	r2, [r7, #12]
 80018c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c8:	f7fe fcda 	bl	8000280 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	3301      	adds	r3, #1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x184>)
 80018f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3740      	adds	r7, #64	@ 0x40
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	017d7840 	.word	0x017d7840

08001910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07b      	b.n	8001a1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001932:	d009      	beq.n	8001948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
 800193a:	e005      	b.n	8001948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe ff40 	bl	80007e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800197e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019cc:	ea42 0103 	orr.w	r1, r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	f003 0104 	and.w	r1, r3, #4
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	f003 0210 	and.w	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b08a      	sub	sp, #40	@ 0x28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a34:	f7ff f894 	bl	8000b60 <HAL_GetTick>
 8001a38:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d00c      	beq.n	8001a6c <HAL_SPI_TransmitReceive+0x4a>
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a58:	d106      	bne.n	8001a68 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <HAL_SPI_TransmitReceive+0x46>
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d001      	beq.n	8001a6c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e17f      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_SPI_TransmitReceive+0x5c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_SPI_TransmitReceive+0x5c>
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e174      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_SPI_TransmitReceive+0x6e>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e16d      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x34a>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d003      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2205      	movs	r2, #5
 8001aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	887a      	ldrh	r2, [r7, #2]
 8001ace:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aec:	2b40      	cmp	r3, #64	@ 0x40
 8001aee:	d007      	beq.n	8001b00 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b08:	d17e      	bne.n	8001c08 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_SPI_TransmitReceive+0xf6>
 8001b12:	8afb      	ldrh	r3, [r7, #22]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d16c      	bne.n	8001bf2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	1c9a      	adds	r2, r3, #2
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b3c:	e059      	b.n	8001bf2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d11b      	bne.n	8001b84 <HAL_SPI_TransmitReceive+0x162>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d016      	beq.n	8001b84 <HAL_SPI_TransmitReceive+0x162>
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d113      	bne.n	8001b84 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	1c9a      	adds	r2, r3, #2
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d119      	bne.n	8001bc6 <HAL_SPI_TransmitReceive+0x1a4>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d014      	beq.n	8001bc6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bae:	1c9a      	adds	r2, r3, #2
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001bc6:	f7fe ffcb 	bl	8000b60 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d80d      	bhi.n	8001bf2 <HAL_SPI_TransmitReceive+0x1d0>
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d009      	beq.n	8001bf2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0bc      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1a0      	bne.n	8001b3e <HAL_SPI_TransmitReceive+0x11c>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d19b      	bne.n	8001b3e <HAL_SPI_TransmitReceive+0x11c>
 8001c06:	e082      	b.n	8001d0e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_SPI_TransmitReceive+0x1f4>
 8001c10:	8afb      	ldrh	r3, [r7, #22]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d171      	bne.n	8001cfa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	330c      	adds	r3, #12
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c3c:	e05d      	b.n	8001cfa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d11c      	bne.n	8001c86 <HAL_SPI_TransmitReceive+0x264>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d017      	beq.n	8001c86 <HAL_SPI_TransmitReceive+0x264>
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d114      	bne.n	8001c86 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	330c      	adds	r3, #12
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <HAL_SPI_TransmitReceive+0x2a6>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d014      	beq.n	8001cc8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cc8:	f7fe ff4a 	bl	8000b60 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d803      	bhi.n	8001ce0 <HAL_SPI_TransmitReceive+0x2be>
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cde:	d102      	bne.n	8001ce6 <HAL_SPI_TransmitReceive+0x2c4>
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e038      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d19c      	bne.n	8001c3e <HAL_SPI_TransmitReceive+0x21c>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d197      	bne.n	8001c3e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d0e:	6a3a      	ldr	r2, [r7, #32]
 8001d10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f8b6 	bl	8001e84 <SPI_EndRxTxTransaction>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e01d      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10a      	bne.n	8001d4e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3728      	adds	r7, #40	@ 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d84:	f7fe feec 	bl	8000b60 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d94:	f7fe fee4 	bl	8000b60 <HAL_GetTick>
 8001d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d9a:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	0d1b      	lsrs	r3, r3, #20
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001daa:	e054      	b.n	8001e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db2:	d050      	beq.n	8001e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001db4:	f7fe fed4 	bl	8000b60 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d902      	bls.n	8001dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d13d      	bne.n	8001e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001de2:	d111      	bne.n	8001e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dec:	d004      	beq.n	8001df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001df6:	d107      	bne.n	8001e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e10:	d10f      	bne.n	8001e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e017      	b.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d19b      	bne.n	8001dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000

08001e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2201      	movs	r2, #1
 8001e98:	2102      	movs	r1, #2
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff ff6a 	bl	8001d74 <SPI_WaitFlagStateUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f043 0220 	orr.w	r2, r3, #32
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e032      	b.n	8001f1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <SPI_EndRxTxTransaction+0xa0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <SPI_EndRxTxTransaction+0xa4>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0d5b      	lsrs	r3, r3, #21
 8001ec2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ed4:	d112      	bne.n	8001efc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	2180      	movs	r1, #128	@ 0x80
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff ff47 	bl	8001d74 <SPI_WaitFlagStateUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d016      	beq.n	8001f1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e00f      	b.n	8001f1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b80      	cmp	r3, #128	@ 0x80
 8001f14:	d0f2      	beq.n	8001efc <SPI_EndRxTxTransaction+0x78>
 8001f16:	e000      	b.n	8001f1a <SPI_EndRxTxTransaction+0x96>
        break;
 8001f18:	bf00      	nop
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000000 	.word	0x20000000
 8001f28:	165e9f81 	.word	0x165e9f81

08001f2c <std>:
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	b510      	push	{r4, lr}
 8001f30:	4604      	mov	r4, r0
 8001f32:	e9c0 3300 	strd	r3, r3, [r0]
 8001f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f3a:	6083      	str	r3, [r0, #8]
 8001f3c:	8181      	strh	r1, [r0, #12]
 8001f3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f40:	81c2      	strh	r2, [r0, #14]
 8001f42:	6183      	str	r3, [r0, #24]
 8001f44:	4619      	mov	r1, r3
 8001f46:	2208      	movs	r2, #8
 8001f48:	305c      	adds	r0, #92	@ 0x5c
 8001f4a:	f000 f9f9 	bl	8002340 <memset>
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <std+0x58>)
 8001f50:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <std+0x5c>)
 8001f54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <std+0x60>)
 8001f58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <std+0x64>)
 8001f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <std+0x68>)
 8001f60:	6224      	str	r4, [r4, #32]
 8001f62:	429c      	cmp	r4, r3
 8001f64:	d006      	beq.n	8001f74 <std+0x48>
 8001f66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f6a:	4294      	cmp	r4, r2
 8001f6c:	d002      	beq.n	8001f74 <std+0x48>
 8001f6e:	33d0      	adds	r3, #208	@ 0xd0
 8001f70:	429c      	cmp	r4, r3
 8001f72:	d105      	bne.n	8001f80 <std+0x54>
 8001f74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f7c:	f000 ba58 	b.w	8002430 <__retarget_lock_init_recursive>
 8001f80:	bd10      	pop	{r4, pc}
 8001f82:	bf00      	nop
 8001f84:	08002191 	.word	0x08002191
 8001f88:	080021b3 	.word	0x080021b3
 8001f8c:	080021eb 	.word	0x080021eb
 8001f90:	0800220f 	.word	0x0800220f
 8001f94:	200000e4 	.word	0x200000e4

08001f98 <stdio_exit_handler>:
 8001f98:	4a02      	ldr	r2, [pc, #8]	@ (8001fa4 <stdio_exit_handler+0xc>)
 8001f9a:	4903      	ldr	r1, [pc, #12]	@ (8001fa8 <stdio_exit_handler+0x10>)
 8001f9c:	4803      	ldr	r0, [pc, #12]	@ (8001fac <stdio_exit_handler+0x14>)
 8001f9e:	f000 b869 	b.w	8002074 <_fwalk_sglue>
 8001fa2:	bf00      	nop
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	08002cd1 	.word	0x08002cd1
 8001fac:	2000001c 	.word	0x2000001c

08001fb0 <cleanup_stdio>:
 8001fb0:	6841      	ldr	r1, [r0, #4]
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <cleanup_stdio+0x34>)
 8001fb4:	4299      	cmp	r1, r3
 8001fb6:	b510      	push	{r4, lr}
 8001fb8:	4604      	mov	r4, r0
 8001fba:	d001      	beq.n	8001fc0 <cleanup_stdio+0x10>
 8001fbc:	f000 fe88 	bl	8002cd0 <_fflush_r>
 8001fc0:	68a1      	ldr	r1, [r4, #8]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <cleanup_stdio+0x38>)
 8001fc4:	4299      	cmp	r1, r3
 8001fc6:	d002      	beq.n	8001fce <cleanup_stdio+0x1e>
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f000 fe81 	bl	8002cd0 <_fflush_r>
 8001fce:	68e1      	ldr	r1, [r4, #12]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <cleanup_stdio+0x3c>)
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	d004      	beq.n	8001fe0 <cleanup_stdio+0x30>
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fdc:	f000 be78 	b.w	8002cd0 <_fflush_r>
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200000e4 	.word	0x200000e4
 8001fe8:	2000014c 	.word	0x2000014c
 8001fec:	200001b4 	.word	0x200001b4

08001ff0 <global_stdio_init.part.0>:
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <global_stdio_init.part.0+0x30>)
 8001ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8002024 <global_stdio_init.part.0+0x34>)
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8002028 <global_stdio_init.part.0+0x38>)
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2104      	movs	r1, #4
 8002000:	f7ff ff94 	bl	8001f2c <std>
 8002004:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002008:	2201      	movs	r2, #1
 800200a:	2109      	movs	r1, #9
 800200c:	f7ff ff8e 	bl	8001f2c <std>
 8002010:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002014:	2202      	movs	r2, #2
 8002016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800201a:	2112      	movs	r1, #18
 800201c:	f7ff bf86 	b.w	8001f2c <std>
 8002020:	2000021c 	.word	0x2000021c
 8002024:	200000e4 	.word	0x200000e4
 8002028:	08001f99 	.word	0x08001f99

0800202c <__sfp_lock_acquire>:
 800202c:	4801      	ldr	r0, [pc, #4]	@ (8002034 <__sfp_lock_acquire+0x8>)
 800202e:	f000 ba00 	b.w	8002432 <__retarget_lock_acquire_recursive>
 8002032:	bf00      	nop
 8002034:	20000225 	.word	0x20000225

08002038 <__sfp_lock_release>:
 8002038:	4801      	ldr	r0, [pc, #4]	@ (8002040 <__sfp_lock_release+0x8>)
 800203a:	f000 b9fb 	b.w	8002434 <__retarget_lock_release_recursive>
 800203e:	bf00      	nop
 8002040:	20000225 	.word	0x20000225

08002044 <__sinit>:
 8002044:	b510      	push	{r4, lr}
 8002046:	4604      	mov	r4, r0
 8002048:	f7ff fff0 	bl	800202c <__sfp_lock_acquire>
 800204c:	6a23      	ldr	r3, [r4, #32]
 800204e:	b11b      	cbz	r3, 8002058 <__sinit+0x14>
 8002050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002054:	f7ff bff0 	b.w	8002038 <__sfp_lock_release>
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <__sinit+0x28>)
 800205a:	6223      	str	r3, [r4, #32]
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <__sinit+0x2c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f5      	bne.n	8002050 <__sinit+0xc>
 8002064:	f7ff ffc4 	bl	8001ff0 <global_stdio_init.part.0>
 8002068:	e7f2      	b.n	8002050 <__sinit+0xc>
 800206a:	bf00      	nop
 800206c:	08001fb1 	.word	0x08001fb1
 8002070:	2000021c 	.word	0x2000021c

08002074 <_fwalk_sglue>:
 8002074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002078:	4607      	mov	r7, r0
 800207a:	4688      	mov	r8, r1
 800207c:	4614      	mov	r4, r2
 800207e:	2600      	movs	r6, #0
 8002080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002084:	f1b9 0901 	subs.w	r9, r9, #1
 8002088:	d505      	bpl.n	8002096 <_fwalk_sglue+0x22>
 800208a:	6824      	ldr	r4, [r4, #0]
 800208c:	2c00      	cmp	r4, #0
 800208e:	d1f7      	bne.n	8002080 <_fwalk_sglue+0xc>
 8002090:	4630      	mov	r0, r6
 8002092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002096:	89ab      	ldrh	r3, [r5, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d907      	bls.n	80020ac <_fwalk_sglue+0x38>
 800209c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020a0:	3301      	adds	r3, #1
 80020a2:	d003      	beq.n	80020ac <_fwalk_sglue+0x38>
 80020a4:	4629      	mov	r1, r5
 80020a6:	4638      	mov	r0, r7
 80020a8:	47c0      	blx	r8
 80020aa:	4306      	orrs	r6, r0
 80020ac:	3568      	adds	r5, #104	@ 0x68
 80020ae:	e7e9      	b.n	8002084 <_fwalk_sglue+0x10>

080020b0 <iprintf>:
 80020b0:	b40f      	push	{r0, r1, r2, r3}
 80020b2:	b507      	push	{r0, r1, r2, lr}
 80020b4:	4906      	ldr	r1, [pc, #24]	@ (80020d0 <iprintf+0x20>)
 80020b6:	ab04      	add	r3, sp, #16
 80020b8:	6808      	ldr	r0, [r1, #0]
 80020ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80020be:	6881      	ldr	r1, [r0, #8]
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	f000 fadb 	bl	800267c <_vfiprintf_r>
 80020c6:	b003      	add	sp, #12
 80020c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80020cc:	b004      	add	sp, #16
 80020ce:	4770      	bx	lr
 80020d0:	20000018 	.word	0x20000018

080020d4 <_puts_r>:
 80020d4:	6a03      	ldr	r3, [r0, #32]
 80020d6:	b570      	push	{r4, r5, r6, lr}
 80020d8:	6884      	ldr	r4, [r0, #8]
 80020da:	4605      	mov	r5, r0
 80020dc:	460e      	mov	r6, r1
 80020de:	b90b      	cbnz	r3, 80020e4 <_puts_r+0x10>
 80020e0:	f7ff ffb0 	bl	8002044 <__sinit>
 80020e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020e6:	07db      	lsls	r3, r3, #31
 80020e8:	d405      	bmi.n	80020f6 <_puts_r+0x22>
 80020ea:	89a3      	ldrh	r3, [r4, #12]
 80020ec:	0598      	lsls	r0, r3, #22
 80020ee:	d402      	bmi.n	80020f6 <_puts_r+0x22>
 80020f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020f2:	f000 f99e 	bl	8002432 <__retarget_lock_acquire_recursive>
 80020f6:	89a3      	ldrh	r3, [r4, #12]
 80020f8:	0719      	lsls	r1, r3, #28
 80020fa:	d502      	bpl.n	8002102 <_puts_r+0x2e>
 80020fc:	6923      	ldr	r3, [r4, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d135      	bne.n	800216e <_puts_r+0x9a>
 8002102:	4621      	mov	r1, r4
 8002104:	4628      	mov	r0, r5
 8002106:	f000 f8c5 	bl	8002294 <__swsetup_r>
 800210a:	b380      	cbz	r0, 800216e <_puts_r+0x9a>
 800210c:	f04f 35ff 	mov.w	r5, #4294967295
 8002110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002112:	07da      	lsls	r2, r3, #31
 8002114:	d405      	bmi.n	8002122 <_puts_r+0x4e>
 8002116:	89a3      	ldrh	r3, [r4, #12]
 8002118:	059b      	lsls	r3, r3, #22
 800211a:	d402      	bmi.n	8002122 <_puts_r+0x4e>
 800211c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800211e:	f000 f989 	bl	8002434 <__retarget_lock_release_recursive>
 8002122:	4628      	mov	r0, r5
 8002124:	bd70      	pop	{r4, r5, r6, pc}
 8002126:	2b00      	cmp	r3, #0
 8002128:	da04      	bge.n	8002134 <_puts_r+0x60>
 800212a:	69a2      	ldr	r2, [r4, #24]
 800212c:	429a      	cmp	r2, r3
 800212e:	dc17      	bgt.n	8002160 <_puts_r+0x8c>
 8002130:	290a      	cmp	r1, #10
 8002132:	d015      	beq.n	8002160 <_puts_r+0x8c>
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	6022      	str	r2, [r4, #0]
 800213a:	7019      	strb	r1, [r3, #0]
 800213c:	68a3      	ldr	r3, [r4, #8]
 800213e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002142:	3b01      	subs	r3, #1
 8002144:	60a3      	str	r3, [r4, #8]
 8002146:	2900      	cmp	r1, #0
 8002148:	d1ed      	bne.n	8002126 <_puts_r+0x52>
 800214a:	2b00      	cmp	r3, #0
 800214c:	da11      	bge.n	8002172 <_puts_r+0x9e>
 800214e:	4622      	mov	r2, r4
 8002150:	210a      	movs	r1, #10
 8002152:	4628      	mov	r0, r5
 8002154:	f000 f85f 	bl	8002216 <__swbuf_r>
 8002158:	3001      	adds	r0, #1
 800215a:	d0d7      	beq.n	800210c <_puts_r+0x38>
 800215c:	250a      	movs	r5, #10
 800215e:	e7d7      	b.n	8002110 <_puts_r+0x3c>
 8002160:	4622      	mov	r2, r4
 8002162:	4628      	mov	r0, r5
 8002164:	f000 f857 	bl	8002216 <__swbuf_r>
 8002168:	3001      	adds	r0, #1
 800216a:	d1e7      	bne.n	800213c <_puts_r+0x68>
 800216c:	e7ce      	b.n	800210c <_puts_r+0x38>
 800216e:	3e01      	subs	r6, #1
 8002170:	e7e4      	b.n	800213c <_puts_r+0x68>
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	6022      	str	r2, [r4, #0]
 8002178:	220a      	movs	r2, #10
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e7ee      	b.n	800215c <_puts_r+0x88>
	...

08002180 <puts>:
 8002180:	4b02      	ldr	r3, [pc, #8]	@ (800218c <puts+0xc>)
 8002182:	4601      	mov	r1, r0
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	f7ff bfa5 	b.w	80020d4 <_puts_r>
 800218a:	bf00      	nop
 800218c:	20000018 	.word	0x20000018

08002190 <__sread>:
 8002190:	b510      	push	{r4, lr}
 8002192:	460c      	mov	r4, r1
 8002194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002198:	f000 f8fc 	bl	8002394 <_read_r>
 800219c:	2800      	cmp	r0, #0
 800219e:	bfab      	itete	ge
 80021a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80021a2:	89a3      	ldrhlt	r3, [r4, #12]
 80021a4:	181b      	addge	r3, r3, r0
 80021a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80021aa:	bfac      	ite	ge
 80021ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80021ae:	81a3      	strhlt	r3, [r4, #12]
 80021b0:	bd10      	pop	{r4, pc}

080021b2 <__swrite>:
 80021b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b6:	461f      	mov	r7, r3
 80021b8:	898b      	ldrh	r3, [r1, #12]
 80021ba:	05db      	lsls	r3, r3, #23
 80021bc:	4605      	mov	r5, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	4616      	mov	r6, r2
 80021c2:	d505      	bpl.n	80021d0 <__swrite+0x1e>
 80021c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c8:	2302      	movs	r3, #2
 80021ca:	2200      	movs	r2, #0
 80021cc:	f000 f8d0 	bl	8002370 <_lseek_r>
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021da:	81a3      	strh	r3, [r4, #12]
 80021dc:	4632      	mov	r2, r6
 80021de:	463b      	mov	r3, r7
 80021e0:	4628      	mov	r0, r5
 80021e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021e6:	f000 b8e7 	b.w	80023b8 <_write_r>

080021ea <__sseek>:
 80021ea:	b510      	push	{r4, lr}
 80021ec:	460c      	mov	r4, r1
 80021ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f2:	f000 f8bd 	bl	8002370 <_lseek_r>
 80021f6:	1c43      	adds	r3, r0, #1
 80021f8:	89a3      	ldrh	r3, [r4, #12]
 80021fa:	bf15      	itete	ne
 80021fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80021fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002202:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002206:	81a3      	strheq	r3, [r4, #12]
 8002208:	bf18      	it	ne
 800220a:	81a3      	strhne	r3, [r4, #12]
 800220c:	bd10      	pop	{r4, pc}

0800220e <__sclose>:
 800220e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002212:	f000 b89d 	b.w	8002350 <_close_r>

08002216 <__swbuf_r>:
 8002216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002218:	460e      	mov	r6, r1
 800221a:	4614      	mov	r4, r2
 800221c:	4605      	mov	r5, r0
 800221e:	b118      	cbz	r0, 8002228 <__swbuf_r+0x12>
 8002220:	6a03      	ldr	r3, [r0, #32]
 8002222:	b90b      	cbnz	r3, 8002228 <__swbuf_r+0x12>
 8002224:	f7ff ff0e 	bl	8002044 <__sinit>
 8002228:	69a3      	ldr	r3, [r4, #24]
 800222a:	60a3      	str	r3, [r4, #8]
 800222c:	89a3      	ldrh	r3, [r4, #12]
 800222e:	071a      	lsls	r2, r3, #28
 8002230:	d501      	bpl.n	8002236 <__swbuf_r+0x20>
 8002232:	6923      	ldr	r3, [r4, #16]
 8002234:	b943      	cbnz	r3, 8002248 <__swbuf_r+0x32>
 8002236:	4621      	mov	r1, r4
 8002238:	4628      	mov	r0, r5
 800223a:	f000 f82b 	bl	8002294 <__swsetup_r>
 800223e:	b118      	cbz	r0, 8002248 <__swbuf_r+0x32>
 8002240:	f04f 37ff 	mov.w	r7, #4294967295
 8002244:	4638      	mov	r0, r7
 8002246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	6922      	ldr	r2, [r4, #16]
 800224c:	1a98      	subs	r0, r3, r2
 800224e:	6963      	ldr	r3, [r4, #20]
 8002250:	b2f6      	uxtb	r6, r6
 8002252:	4283      	cmp	r3, r0
 8002254:	4637      	mov	r7, r6
 8002256:	dc05      	bgt.n	8002264 <__swbuf_r+0x4e>
 8002258:	4621      	mov	r1, r4
 800225a:	4628      	mov	r0, r5
 800225c:	f000 fd38 	bl	8002cd0 <_fflush_r>
 8002260:	2800      	cmp	r0, #0
 8002262:	d1ed      	bne.n	8002240 <__swbuf_r+0x2a>
 8002264:	68a3      	ldr	r3, [r4, #8]
 8002266:	3b01      	subs	r3, #1
 8002268:	60a3      	str	r3, [r4, #8]
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	6022      	str	r2, [r4, #0]
 8002270:	701e      	strb	r6, [r3, #0]
 8002272:	6962      	ldr	r2, [r4, #20]
 8002274:	1c43      	adds	r3, r0, #1
 8002276:	429a      	cmp	r2, r3
 8002278:	d004      	beq.n	8002284 <__swbuf_r+0x6e>
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	07db      	lsls	r3, r3, #31
 800227e:	d5e1      	bpl.n	8002244 <__swbuf_r+0x2e>
 8002280:	2e0a      	cmp	r6, #10
 8002282:	d1df      	bne.n	8002244 <__swbuf_r+0x2e>
 8002284:	4621      	mov	r1, r4
 8002286:	4628      	mov	r0, r5
 8002288:	f000 fd22 	bl	8002cd0 <_fflush_r>
 800228c:	2800      	cmp	r0, #0
 800228e:	d0d9      	beq.n	8002244 <__swbuf_r+0x2e>
 8002290:	e7d6      	b.n	8002240 <__swbuf_r+0x2a>
	...

08002294 <__swsetup_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	4b29      	ldr	r3, [pc, #164]	@ (800233c <__swsetup_r+0xa8>)
 8002298:	4605      	mov	r5, r0
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	460c      	mov	r4, r1
 800229e:	b118      	cbz	r0, 80022a8 <__swsetup_r+0x14>
 80022a0:	6a03      	ldr	r3, [r0, #32]
 80022a2:	b90b      	cbnz	r3, 80022a8 <__swsetup_r+0x14>
 80022a4:	f7ff fece 	bl	8002044 <__sinit>
 80022a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ac:	0719      	lsls	r1, r3, #28
 80022ae:	d422      	bmi.n	80022f6 <__swsetup_r+0x62>
 80022b0:	06da      	lsls	r2, r3, #27
 80022b2:	d407      	bmi.n	80022c4 <__swsetup_r+0x30>
 80022b4:	2209      	movs	r2, #9
 80022b6:	602a      	str	r2, [r5, #0]
 80022b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022bc:	81a3      	strh	r3, [r4, #12]
 80022be:	f04f 30ff 	mov.w	r0, #4294967295
 80022c2:	e033      	b.n	800232c <__swsetup_r+0x98>
 80022c4:	0758      	lsls	r0, r3, #29
 80022c6:	d512      	bpl.n	80022ee <__swsetup_r+0x5a>
 80022c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022ca:	b141      	cbz	r1, 80022de <__swsetup_r+0x4a>
 80022cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80022d0:	4299      	cmp	r1, r3
 80022d2:	d002      	beq.n	80022da <__swsetup_r+0x46>
 80022d4:	4628      	mov	r0, r5
 80022d6:	f000 f8af 	bl	8002438 <_free_r>
 80022da:	2300      	movs	r3, #0
 80022dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80022de:	89a3      	ldrh	r3, [r4, #12]
 80022e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80022e4:	81a3      	strh	r3, [r4, #12]
 80022e6:	2300      	movs	r3, #0
 80022e8:	6063      	str	r3, [r4, #4]
 80022ea:	6923      	ldr	r3, [r4, #16]
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	89a3      	ldrh	r3, [r4, #12]
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	81a3      	strh	r3, [r4, #12]
 80022f6:	6923      	ldr	r3, [r4, #16]
 80022f8:	b94b      	cbnz	r3, 800230e <__swsetup_r+0x7a>
 80022fa:	89a3      	ldrh	r3, [r4, #12]
 80022fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002304:	d003      	beq.n	800230e <__swsetup_r+0x7a>
 8002306:	4621      	mov	r1, r4
 8002308:	4628      	mov	r0, r5
 800230a:	f000 fd2f 	bl	8002d6c <__smakebuf_r>
 800230e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002312:	f013 0201 	ands.w	r2, r3, #1
 8002316:	d00a      	beq.n	800232e <__swsetup_r+0x9a>
 8002318:	2200      	movs	r2, #0
 800231a:	60a2      	str	r2, [r4, #8]
 800231c:	6962      	ldr	r2, [r4, #20]
 800231e:	4252      	negs	r2, r2
 8002320:	61a2      	str	r2, [r4, #24]
 8002322:	6922      	ldr	r2, [r4, #16]
 8002324:	b942      	cbnz	r2, 8002338 <__swsetup_r+0xa4>
 8002326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800232a:	d1c5      	bne.n	80022b8 <__swsetup_r+0x24>
 800232c:	bd38      	pop	{r3, r4, r5, pc}
 800232e:	0799      	lsls	r1, r3, #30
 8002330:	bf58      	it	pl
 8002332:	6962      	ldrpl	r2, [r4, #20]
 8002334:	60a2      	str	r2, [r4, #8]
 8002336:	e7f4      	b.n	8002322 <__swsetup_r+0x8e>
 8002338:	2000      	movs	r0, #0
 800233a:	e7f7      	b.n	800232c <__swsetup_r+0x98>
 800233c:	20000018 	.word	0x20000018

08002340 <memset>:
 8002340:	4402      	add	r2, r0
 8002342:	4603      	mov	r3, r0
 8002344:	4293      	cmp	r3, r2
 8002346:	d100      	bne.n	800234a <memset+0xa>
 8002348:	4770      	bx	lr
 800234a:	f803 1b01 	strb.w	r1, [r3], #1
 800234e:	e7f9      	b.n	8002344 <memset+0x4>

08002350 <_close_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4d06      	ldr	r5, [pc, #24]	@ (800236c <_close_r+0x1c>)
 8002354:	2300      	movs	r3, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	602b      	str	r3, [r5, #0]
 800235c:	f7fe faf4 	bl	8000948 <_close>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d102      	bne.n	800236a <_close_r+0x1a>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	b103      	cbz	r3, 800236a <_close_r+0x1a>
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	20000220 	.word	0x20000220

08002370 <_lseek_r>:
 8002370:	b538      	push	{r3, r4, r5, lr}
 8002372:	4d07      	ldr	r5, [pc, #28]	@ (8002390 <_lseek_r+0x20>)
 8002374:	4604      	mov	r4, r0
 8002376:	4608      	mov	r0, r1
 8002378:	4611      	mov	r1, r2
 800237a:	2200      	movs	r2, #0
 800237c:	602a      	str	r2, [r5, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	f7fe fb09 	bl	8000996 <_lseek>
 8002384:	1c43      	adds	r3, r0, #1
 8002386:	d102      	bne.n	800238e <_lseek_r+0x1e>
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	b103      	cbz	r3, 800238e <_lseek_r+0x1e>
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	bd38      	pop	{r3, r4, r5, pc}
 8002390:	20000220 	.word	0x20000220

08002394 <_read_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d07      	ldr	r5, [pc, #28]	@ (80023b4 <_read_r+0x20>)
 8002398:	4604      	mov	r4, r0
 800239a:	4608      	mov	r0, r1
 800239c:	4611      	mov	r1, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	602a      	str	r2, [r5, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f7fe fa97 	bl	80008d6 <_read>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d102      	bne.n	80023b2 <_read_r+0x1e>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	b103      	cbz	r3, 80023b2 <_read_r+0x1e>
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	20000220 	.word	0x20000220

080023b8 <_write_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4d07      	ldr	r5, [pc, #28]	@ (80023d8 <_write_r+0x20>)
 80023bc:	4604      	mov	r4, r0
 80023be:	4608      	mov	r0, r1
 80023c0:	4611      	mov	r1, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	602a      	str	r2, [r5, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f7fe faa2 	bl	8000910 <_write>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <_write_r+0x1e>
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	b103      	cbz	r3, 80023d6 <_write_r+0x1e>
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	20000220 	.word	0x20000220

080023dc <__errno>:
 80023dc:	4b01      	ldr	r3, [pc, #4]	@ (80023e4 <__errno+0x8>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000018 	.word	0x20000018

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	4d0d      	ldr	r5, [pc, #52]	@ (8002420 <__libc_init_array+0x38>)
 80023ec:	4c0d      	ldr	r4, [pc, #52]	@ (8002424 <__libc_init_array+0x3c>)
 80023ee:	1b64      	subs	r4, r4, r5
 80023f0:	10a4      	asrs	r4, r4, #2
 80023f2:	2600      	movs	r6, #0
 80023f4:	42a6      	cmp	r6, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	4d0b      	ldr	r5, [pc, #44]	@ (8002428 <__libc_init_array+0x40>)
 80023fa:	4c0c      	ldr	r4, [pc, #48]	@ (800242c <__libc_init_array+0x44>)
 80023fc:	f000 fd24 	bl	8002e48 <_init>
 8002400:	1b64      	subs	r4, r4, r5
 8002402:	10a4      	asrs	r4, r4, #2
 8002404:	2600      	movs	r6, #0
 8002406:	42a6      	cmp	r6, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002410:	4798      	blx	r3
 8002412:	3601      	adds	r6, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	f855 3b04 	ldr.w	r3, [r5], #4
 800241a:	4798      	blx	r3
 800241c:	3601      	adds	r6, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	08002edc 	.word	0x08002edc
 8002424:	08002edc 	.word	0x08002edc
 8002428:	08002edc 	.word	0x08002edc
 800242c:	08002ee0 	.word	0x08002ee0

08002430 <__retarget_lock_init_recursive>:
 8002430:	4770      	bx	lr

08002432 <__retarget_lock_acquire_recursive>:
 8002432:	4770      	bx	lr

08002434 <__retarget_lock_release_recursive>:
 8002434:	4770      	bx	lr
	...

08002438 <_free_r>:
 8002438:	b538      	push	{r3, r4, r5, lr}
 800243a:	4605      	mov	r5, r0
 800243c:	2900      	cmp	r1, #0
 800243e:	d041      	beq.n	80024c4 <_free_r+0x8c>
 8002440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002444:	1f0c      	subs	r4, r1, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	bfb8      	it	lt
 800244a:	18e4      	addlt	r4, r4, r3
 800244c:	f000 f8e0 	bl	8002610 <__malloc_lock>
 8002450:	4a1d      	ldr	r2, [pc, #116]	@ (80024c8 <_free_r+0x90>)
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	b933      	cbnz	r3, 8002464 <_free_r+0x2c>
 8002456:	6063      	str	r3, [r4, #4]
 8002458:	6014      	str	r4, [r2, #0]
 800245a:	4628      	mov	r0, r5
 800245c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002460:	f000 b8dc 	b.w	800261c <__malloc_unlock>
 8002464:	42a3      	cmp	r3, r4
 8002466:	d908      	bls.n	800247a <_free_r+0x42>
 8002468:	6820      	ldr	r0, [r4, #0]
 800246a:	1821      	adds	r1, r4, r0
 800246c:	428b      	cmp	r3, r1
 800246e:	bf01      	itttt	eq
 8002470:	6819      	ldreq	r1, [r3, #0]
 8002472:	685b      	ldreq	r3, [r3, #4]
 8002474:	1809      	addeq	r1, r1, r0
 8002476:	6021      	streq	r1, [r4, #0]
 8002478:	e7ed      	b.n	8002456 <_free_r+0x1e>
 800247a:	461a      	mov	r2, r3
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	b10b      	cbz	r3, 8002484 <_free_r+0x4c>
 8002480:	42a3      	cmp	r3, r4
 8002482:	d9fa      	bls.n	800247a <_free_r+0x42>
 8002484:	6811      	ldr	r1, [r2, #0]
 8002486:	1850      	adds	r0, r2, r1
 8002488:	42a0      	cmp	r0, r4
 800248a:	d10b      	bne.n	80024a4 <_free_r+0x6c>
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	4401      	add	r1, r0
 8002490:	1850      	adds	r0, r2, r1
 8002492:	4283      	cmp	r3, r0
 8002494:	6011      	str	r1, [r2, #0]
 8002496:	d1e0      	bne.n	800245a <_free_r+0x22>
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	6053      	str	r3, [r2, #4]
 800249e:	4408      	add	r0, r1
 80024a0:	6010      	str	r0, [r2, #0]
 80024a2:	e7da      	b.n	800245a <_free_r+0x22>
 80024a4:	d902      	bls.n	80024ac <_free_r+0x74>
 80024a6:	230c      	movs	r3, #12
 80024a8:	602b      	str	r3, [r5, #0]
 80024aa:	e7d6      	b.n	800245a <_free_r+0x22>
 80024ac:	6820      	ldr	r0, [r4, #0]
 80024ae:	1821      	adds	r1, r4, r0
 80024b0:	428b      	cmp	r3, r1
 80024b2:	bf04      	itt	eq
 80024b4:	6819      	ldreq	r1, [r3, #0]
 80024b6:	685b      	ldreq	r3, [r3, #4]
 80024b8:	6063      	str	r3, [r4, #4]
 80024ba:	bf04      	itt	eq
 80024bc:	1809      	addeq	r1, r1, r0
 80024be:	6021      	streq	r1, [r4, #0]
 80024c0:	6054      	str	r4, [r2, #4]
 80024c2:	e7ca      	b.n	800245a <_free_r+0x22>
 80024c4:	bd38      	pop	{r3, r4, r5, pc}
 80024c6:	bf00      	nop
 80024c8:	2000022c 	.word	0x2000022c

080024cc <sbrk_aligned>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	4e0f      	ldr	r6, [pc, #60]	@ (800250c <sbrk_aligned+0x40>)
 80024d0:	460c      	mov	r4, r1
 80024d2:	6831      	ldr	r1, [r6, #0]
 80024d4:	4605      	mov	r5, r0
 80024d6:	b911      	cbnz	r1, 80024de <sbrk_aligned+0x12>
 80024d8:	f000 fca6 	bl	8002e28 <_sbrk_r>
 80024dc:	6030      	str	r0, [r6, #0]
 80024de:	4621      	mov	r1, r4
 80024e0:	4628      	mov	r0, r5
 80024e2:	f000 fca1 	bl	8002e28 <_sbrk_r>
 80024e6:	1c43      	adds	r3, r0, #1
 80024e8:	d103      	bne.n	80024f2 <sbrk_aligned+0x26>
 80024ea:	f04f 34ff 	mov.w	r4, #4294967295
 80024ee:	4620      	mov	r0, r4
 80024f0:	bd70      	pop	{r4, r5, r6, pc}
 80024f2:	1cc4      	adds	r4, r0, #3
 80024f4:	f024 0403 	bic.w	r4, r4, #3
 80024f8:	42a0      	cmp	r0, r4
 80024fa:	d0f8      	beq.n	80024ee <sbrk_aligned+0x22>
 80024fc:	1a21      	subs	r1, r4, r0
 80024fe:	4628      	mov	r0, r5
 8002500:	f000 fc92 	bl	8002e28 <_sbrk_r>
 8002504:	3001      	adds	r0, #1
 8002506:	d1f2      	bne.n	80024ee <sbrk_aligned+0x22>
 8002508:	e7ef      	b.n	80024ea <sbrk_aligned+0x1e>
 800250a:	bf00      	nop
 800250c:	20000228 	.word	0x20000228

08002510 <_malloc_r>:
 8002510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002514:	1ccd      	adds	r5, r1, #3
 8002516:	f025 0503 	bic.w	r5, r5, #3
 800251a:	3508      	adds	r5, #8
 800251c:	2d0c      	cmp	r5, #12
 800251e:	bf38      	it	cc
 8002520:	250c      	movcc	r5, #12
 8002522:	2d00      	cmp	r5, #0
 8002524:	4606      	mov	r6, r0
 8002526:	db01      	blt.n	800252c <_malloc_r+0x1c>
 8002528:	42a9      	cmp	r1, r5
 800252a:	d904      	bls.n	8002536 <_malloc_r+0x26>
 800252c:	230c      	movs	r3, #12
 800252e:	6033      	str	r3, [r6, #0]
 8002530:	2000      	movs	r0, #0
 8002532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800260c <_malloc_r+0xfc>
 800253a:	f000 f869 	bl	8002610 <__malloc_lock>
 800253e:	f8d8 3000 	ldr.w	r3, [r8]
 8002542:	461c      	mov	r4, r3
 8002544:	bb44      	cbnz	r4, 8002598 <_malloc_r+0x88>
 8002546:	4629      	mov	r1, r5
 8002548:	4630      	mov	r0, r6
 800254a:	f7ff ffbf 	bl	80024cc <sbrk_aligned>
 800254e:	1c43      	adds	r3, r0, #1
 8002550:	4604      	mov	r4, r0
 8002552:	d158      	bne.n	8002606 <_malloc_r+0xf6>
 8002554:	f8d8 4000 	ldr.w	r4, [r8]
 8002558:	4627      	mov	r7, r4
 800255a:	2f00      	cmp	r7, #0
 800255c:	d143      	bne.n	80025e6 <_malloc_r+0xd6>
 800255e:	2c00      	cmp	r4, #0
 8002560:	d04b      	beq.n	80025fa <_malloc_r+0xea>
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	4639      	mov	r1, r7
 8002566:	4630      	mov	r0, r6
 8002568:	eb04 0903 	add.w	r9, r4, r3
 800256c:	f000 fc5c 	bl	8002e28 <_sbrk_r>
 8002570:	4581      	cmp	r9, r0
 8002572:	d142      	bne.n	80025fa <_malloc_r+0xea>
 8002574:	6821      	ldr	r1, [r4, #0]
 8002576:	1a6d      	subs	r5, r5, r1
 8002578:	4629      	mov	r1, r5
 800257a:	4630      	mov	r0, r6
 800257c:	f7ff ffa6 	bl	80024cc <sbrk_aligned>
 8002580:	3001      	adds	r0, #1
 8002582:	d03a      	beq.n	80025fa <_malloc_r+0xea>
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	442b      	add	r3, r5
 8002588:	6023      	str	r3, [r4, #0]
 800258a:	f8d8 3000 	ldr.w	r3, [r8]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	bb62      	cbnz	r2, 80025ec <_malloc_r+0xdc>
 8002592:	f8c8 7000 	str.w	r7, [r8]
 8002596:	e00f      	b.n	80025b8 <_malloc_r+0xa8>
 8002598:	6822      	ldr	r2, [r4, #0]
 800259a:	1b52      	subs	r2, r2, r5
 800259c:	d420      	bmi.n	80025e0 <_malloc_r+0xd0>
 800259e:	2a0b      	cmp	r2, #11
 80025a0:	d917      	bls.n	80025d2 <_malloc_r+0xc2>
 80025a2:	1961      	adds	r1, r4, r5
 80025a4:	42a3      	cmp	r3, r4
 80025a6:	6025      	str	r5, [r4, #0]
 80025a8:	bf18      	it	ne
 80025aa:	6059      	strne	r1, [r3, #4]
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	bf08      	it	eq
 80025b0:	f8c8 1000 	streq.w	r1, [r8]
 80025b4:	5162      	str	r2, [r4, r5]
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	4630      	mov	r0, r6
 80025ba:	f000 f82f 	bl	800261c <__malloc_unlock>
 80025be:	f104 000b 	add.w	r0, r4, #11
 80025c2:	1d23      	adds	r3, r4, #4
 80025c4:	f020 0007 	bic.w	r0, r0, #7
 80025c8:	1ac2      	subs	r2, r0, r3
 80025ca:	bf1c      	itt	ne
 80025cc:	1a1b      	subne	r3, r3, r0
 80025ce:	50a3      	strne	r3, [r4, r2]
 80025d0:	e7af      	b.n	8002532 <_malloc_r+0x22>
 80025d2:	6862      	ldr	r2, [r4, #4]
 80025d4:	42a3      	cmp	r3, r4
 80025d6:	bf0c      	ite	eq
 80025d8:	f8c8 2000 	streq.w	r2, [r8]
 80025dc:	605a      	strne	r2, [r3, #4]
 80025de:	e7eb      	b.n	80025b8 <_malloc_r+0xa8>
 80025e0:	4623      	mov	r3, r4
 80025e2:	6864      	ldr	r4, [r4, #4]
 80025e4:	e7ae      	b.n	8002544 <_malloc_r+0x34>
 80025e6:	463c      	mov	r4, r7
 80025e8:	687f      	ldr	r7, [r7, #4]
 80025ea:	e7b6      	b.n	800255a <_malloc_r+0x4a>
 80025ec:	461a      	mov	r2, r3
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	42a3      	cmp	r3, r4
 80025f2:	d1fb      	bne.n	80025ec <_malloc_r+0xdc>
 80025f4:	2300      	movs	r3, #0
 80025f6:	6053      	str	r3, [r2, #4]
 80025f8:	e7de      	b.n	80025b8 <_malloc_r+0xa8>
 80025fa:	230c      	movs	r3, #12
 80025fc:	6033      	str	r3, [r6, #0]
 80025fe:	4630      	mov	r0, r6
 8002600:	f000 f80c 	bl	800261c <__malloc_unlock>
 8002604:	e794      	b.n	8002530 <_malloc_r+0x20>
 8002606:	6005      	str	r5, [r0, #0]
 8002608:	e7d6      	b.n	80025b8 <_malloc_r+0xa8>
 800260a:	bf00      	nop
 800260c:	2000022c 	.word	0x2000022c

08002610 <__malloc_lock>:
 8002610:	4801      	ldr	r0, [pc, #4]	@ (8002618 <__malloc_lock+0x8>)
 8002612:	f7ff bf0e 	b.w	8002432 <__retarget_lock_acquire_recursive>
 8002616:	bf00      	nop
 8002618:	20000224 	.word	0x20000224

0800261c <__malloc_unlock>:
 800261c:	4801      	ldr	r0, [pc, #4]	@ (8002624 <__malloc_unlock+0x8>)
 800261e:	f7ff bf09 	b.w	8002434 <__retarget_lock_release_recursive>
 8002622:	bf00      	nop
 8002624:	20000224 	.word	0x20000224

08002628 <__sfputc_r>:
 8002628:	6893      	ldr	r3, [r2, #8]
 800262a:	3b01      	subs	r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	b410      	push	{r4}
 8002630:	6093      	str	r3, [r2, #8]
 8002632:	da08      	bge.n	8002646 <__sfputc_r+0x1e>
 8002634:	6994      	ldr	r4, [r2, #24]
 8002636:	42a3      	cmp	r3, r4
 8002638:	db01      	blt.n	800263e <__sfputc_r+0x16>
 800263a:	290a      	cmp	r1, #10
 800263c:	d103      	bne.n	8002646 <__sfputc_r+0x1e>
 800263e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002642:	f7ff bde8 	b.w	8002216 <__swbuf_r>
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	1c58      	adds	r0, r3, #1
 800264a:	6010      	str	r0, [r2, #0]
 800264c:	7019      	strb	r1, [r3, #0]
 800264e:	4608      	mov	r0, r1
 8002650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002654:	4770      	bx	lr

08002656 <__sfputs_r>:
 8002656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002658:	4606      	mov	r6, r0
 800265a:	460f      	mov	r7, r1
 800265c:	4614      	mov	r4, r2
 800265e:	18d5      	adds	r5, r2, r3
 8002660:	42ac      	cmp	r4, r5
 8002662:	d101      	bne.n	8002668 <__sfputs_r+0x12>
 8002664:	2000      	movs	r0, #0
 8002666:	e007      	b.n	8002678 <__sfputs_r+0x22>
 8002668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800266c:	463a      	mov	r2, r7
 800266e:	4630      	mov	r0, r6
 8002670:	f7ff ffda 	bl	8002628 <__sfputc_r>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d1f3      	bne.n	8002660 <__sfputs_r+0xa>
 8002678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800267c <_vfiprintf_r>:
 800267c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002680:	460d      	mov	r5, r1
 8002682:	b09d      	sub	sp, #116	@ 0x74
 8002684:	4614      	mov	r4, r2
 8002686:	4698      	mov	r8, r3
 8002688:	4606      	mov	r6, r0
 800268a:	b118      	cbz	r0, 8002694 <_vfiprintf_r+0x18>
 800268c:	6a03      	ldr	r3, [r0, #32]
 800268e:	b90b      	cbnz	r3, 8002694 <_vfiprintf_r+0x18>
 8002690:	f7ff fcd8 	bl	8002044 <__sinit>
 8002694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002696:	07d9      	lsls	r1, r3, #31
 8002698:	d405      	bmi.n	80026a6 <_vfiprintf_r+0x2a>
 800269a:	89ab      	ldrh	r3, [r5, #12]
 800269c:	059a      	lsls	r2, r3, #22
 800269e:	d402      	bmi.n	80026a6 <_vfiprintf_r+0x2a>
 80026a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026a2:	f7ff fec6 	bl	8002432 <__retarget_lock_acquire_recursive>
 80026a6:	89ab      	ldrh	r3, [r5, #12]
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	d501      	bpl.n	80026b0 <_vfiprintf_r+0x34>
 80026ac:	692b      	ldr	r3, [r5, #16]
 80026ae:	b99b      	cbnz	r3, 80026d8 <_vfiprintf_r+0x5c>
 80026b0:	4629      	mov	r1, r5
 80026b2:	4630      	mov	r0, r6
 80026b4:	f7ff fdee 	bl	8002294 <__swsetup_r>
 80026b8:	b170      	cbz	r0, 80026d8 <_vfiprintf_r+0x5c>
 80026ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026bc:	07dc      	lsls	r4, r3, #31
 80026be:	d504      	bpl.n	80026ca <_vfiprintf_r+0x4e>
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	b01d      	add	sp, #116	@ 0x74
 80026c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ca:	89ab      	ldrh	r3, [r5, #12]
 80026cc:	0598      	lsls	r0, r3, #22
 80026ce:	d4f7      	bmi.n	80026c0 <_vfiprintf_r+0x44>
 80026d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026d2:	f7ff feaf 	bl	8002434 <__retarget_lock_release_recursive>
 80026d6:	e7f3      	b.n	80026c0 <_vfiprintf_r+0x44>
 80026d8:	2300      	movs	r3, #0
 80026da:	9309      	str	r3, [sp, #36]	@ 0x24
 80026dc:	2320      	movs	r3, #32
 80026de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80026e6:	2330      	movs	r3, #48	@ 0x30
 80026e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002898 <_vfiprintf_r+0x21c>
 80026ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80026f0:	f04f 0901 	mov.w	r9, #1
 80026f4:	4623      	mov	r3, r4
 80026f6:	469a      	mov	sl, r3
 80026f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026fc:	b10a      	cbz	r2, 8002702 <_vfiprintf_r+0x86>
 80026fe:	2a25      	cmp	r2, #37	@ 0x25
 8002700:	d1f9      	bne.n	80026f6 <_vfiprintf_r+0x7a>
 8002702:	ebba 0b04 	subs.w	fp, sl, r4
 8002706:	d00b      	beq.n	8002720 <_vfiprintf_r+0xa4>
 8002708:	465b      	mov	r3, fp
 800270a:	4622      	mov	r2, r4
 800270c:	4629      	mov	r1, r5
 800270e:	4630      	mov	r0, r6
 8002710:	f7ff ffa1 	bl	8002656 <__sfputs_r>
 8002714:	3001      	adds	r0, #1
 8002716:	f000 80a7 	beq.w	8002868 <_vfiprintf_r+0x1ec>
 800271a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800271c:	445a      	add	r2, fp
 800271e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002720:	f89a 3000 	ldrb.w	r3, [sl]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 809f 	beq.w	8002868 <_vfiprintf_r+0x1ec>
 800272a:	2300      	movs	r3, #0
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002734:	f10a 0a01 	add.w	sl, sl, #1
 8002738:	9304      	str	r3, [sp, #16]
 800273a:	9307      	str	r3, [sp, #28]
 800273c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002740:	931a      	str	r3, [sp, #104]	@ 0x68
 8002742:	4654      	mov	r4, sl
 8002744:	2205      	movs	r2, #5
 8002746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800274a:	4853      	ldr	r0, [pc, #332]	@ (8002898 <_vfiprintf_r+0x21c>)
 800274c:	f7fd fd48 	bl	80001e0 <memchr>
 8002750:	9a04      	ldr	r2, [sp, #16]
 8002752:	b9d8      	cbnz	r0, 800278c <_vfiprintf_r+0x110>
 8002754:	06d1      	lsls	r1, r2, #27
 8002756:	bf44      	itt	mi
 8002758:	2320      	movmi	r3, #32
 800275a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800275e:	0713      	lsls	r3, r2, #28
 8002760:	bf44      	itt	mi
 8002762:	232b      	movmi	r3, #43	@ 0x2b
 8002764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002768:	f89a 3000 	ldrb.w	r3, [sl]
 800276c:	2b2a      	cmp	r3, #42	@ 0x2a
 800276e:	d015      	beq.n	800279c <_vfiprintf_r+0x120>
 8002770:	9a07      	ldr	r2, [sp, #28]
 8002772:	4654      	mov	r4, sl
 8002774:	2000      	movs	r0, #0
 8002776:	f04f 0c0a 	mov.w	ip, #10
 800277a:	4621      	mov	r1, r4
 800277c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002780:	3b30      	subs	r3, #48	@ 0x30
 8002782:	2b09      	cmp	r3, #9
 8002784:	d94b      	bls.n	800281e <_vfiprintf_r+0x1a2>
 8002786:	b1b0      	cbz	r0, 80027b6 <_vfiprintf_r+0x13a>
 8002788:	9207      	str	r2, [sp, #28]
 800278a:	e014      	b.n	80027b6 <_vfiprintf_r+0x13a>
 800278c:	eba0 0308 	sub.w	r3, r0, r8
 8002790:	fa09 f303 	lsl.w	r3, r9, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	9304      	str	r3, [sp, #16]
 8002798:	46a2      	mov	sl, r4
 800279a:	e7d2      	b.n	8002742 <_vfiprintf_r+0xc6>
 800279c:	9b03      	ldr	r3, [sp, #12]
 800279e:	1d19      	adds	r1, r3, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	9103      	str	r1, [sp, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bfbb      	ittet	lt
 80027a8:	425b      	neglt	r3, r3
 80027aa:	f042 0202 	orrlt.w	r2, r2, #2
 80027ae:	9307      	strge	r3, [sp, #28]
 80027b0:	9307      	strlt	r3, [sp, #28]
 80027b2:	bfb8      	it	lt
 80027b4:	9204      	strlt	r2, [sp, #16]
 80027b6:	7823      	ldrb	r3, [r4, #0]
 80027b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80027ba:	d10a      	bne.n	80027d2 <_vfiprintf_r+0x156>
 80027bc:	7863      	ldrb	r3, [r4, #1]
 80027be:	2b2a      	cmp	r3, #42	@ 0x2a
 80027c0:	d132      	bne.n	8002828 <_vfiprintf_r+0x1ac>
 80027c2:	9b03      	ldr	r3, [sp, #12]
 80027c4:	1d1a      	adds	r2, r3, #4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	9203      	str	r2, [sp, #12]
 80027ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027ce:	3402      	adds	r4, #2
 80027d0:	9305      	str	r3, [sp, #20]
 80027d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80028a8 <_vfiprintf_r+0x22c>
 80027d6:	7821      	ldrb	r1, [r4, #0]
 80027d8:	2203      	movs	r2, #3
 80027da:	4650      	mov	r0, sl
 80027dc:	f7fd fd00 	bl	80001e0 <memchr>
 80027e0:	b138      	cbz	r0, 80027f2 <_vfiprintf_r+0x176>
 80027e2:	9b04      	ldr	r3, [sp, #16]
 80027e4:	eba0 000a 	sub.w	r0, r0, sl
 80027e8:	2240      	movs	r2, #64	@ 0x40
 80027ea:	4082      	lsls	r2, r0
 80027ec:	4313      	orrs	r3, r2
 80027ee:	3401      	adds	r4, #1
 80027f0:	9304      	str	r3, [sp, #16]
 80027f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f6:	4829      	ldr	r0, [pc, #164]	@ (800289c <_vfiprintf_r+0x220>)
 80027f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80027fc:	2206      	movs	r2, #6
 80027fe:	f7fd fcef 	bl	80001e0 <memchr>
 8002802:	2800      	cmp	r0, #0
 8002804:	d03f      	beq.n	8002886 <_vfiprintf_r+0x20a>
 8002806:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <_vfiprintf_r+0x224>)
 8002808:	bb1b      	cbnz	r3, 8002852 <_vfiprintf_r+0x1d6>
 800280a:	9b03      	ldr	r3, [sp, #12]
 800280c:	3307      	adds	r3, #7
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	3308      	adds	r3, #8
 8002814:	9303      	str	r3, [sp, #12]
 8002816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002818:	443b      	add	r3, r7
 800281a:	9309      	str	r3, [sp, #36]	@ 0x24
 800281c:	e76a      	b.n	80026f4 <_vfiprintf_r+0x78>
 800281e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002822:	460c      	mov	r4, r1
 8002824:	2001      	movs	r0, #1
 8002826:	e7a8      	b.n	800277a <_vfiprintf_r+0xfe>
 8002828:	2300      	movs	r3, #0
 800282a:	3401      	adds	r4, #1
 800282c:	9305      	str	r3, [sp, #20]
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 0c0a 	mov.w	ip, #10
 8002834:	4620      	mov	r0, r4
 8002836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800283a:	3a30      	subs	r2, #48	@ 0x30
 800283c:	2a09      	cmp	r2, #9
 800283e:	d903      	bls.n	8002848 <_vfiprintf_r+0x1cc>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0c6      	beq.n	80027d2 <_vfiprintf_r+0x156>
 8002844:	9105      	str	r1, [sp, #20]
 8002846:	e7c4      	b.n	80027d2 <_vfiprintf_r+0x156>
 8002848:	fb0c 2101 	mla	r1, ip, r1, r2
 800284c:	4604      	mov	r4, r0
 800284e:	2301      	movs	r3, #1
 8002850:	e7f0      	b.n	8002834 <_vfiprintf_r+0x1b8>
 8002852:	ab03      	add	r3, sp, #12
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	462a      	mov	r2, r5
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <_vfiprintf_r+0x228>)
 800285a:	a904      	add	r1, sp, #16
 800285c:	4630      	mov	r0, r6
 800285e:	f3af 8000 	nop.w
 8002862:	4607      	mov	r7, r0
 8002864:	1c78      	adds	r0, r7, #1
 8002866:	d1d6      	bne.n	8002816 <_vfiprintf_r+0x19a>
 8002868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800286a:	07d9      	lsls	r1, r3, #31
 800286c:	d405      	bmi.n	800287a <_vfiprintf_r+0x1fe>
 800286e:	89ab      	ldrh	r3, [r5, #12]
 8002870:	059a      	lsls	r2, r3, #22
 8002872:	d402      	bmi.n	800287a <_vfiprintf_r+0x1fe>
 8002874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002876:	f7ff fddd 	bl	8002434 <__retarget_lock_release_recursive>
 800287a:	89ab      	ldrh	r3, [r5, #12]
 800287c:	065b      	lsls	r3, r3, #25
 800287e:	f53f af1f 	bmi.w	80026c0 <_vfiprintf_r+0x44>
 8002882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002884:	e71e      	b.n	80026c4 <_vfiprintf_r+0x48>
 8002886:	ab03      	add	r3, sp, #12
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	462a      	mov	r2, r5
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <_vfiprintf_r+0x228>)
 800288e:	a904      	add	r1, sp, #16
 8002890:	4630      	mov	r0, r6
 8002892:	f000 f879 	bl	8002988 <_printf_i>
 8002896:	e7e4      	b.n	8002862 <_vfiprintf_r+0x1e6>
 8002898:	08002ea0 	.word	0x08002ea0
 800289c:	08002eaa 	.word	0x08002eaa
 80028a0:	00000000 	.word	0x00000000
 80028a4:	08002657 	.word	0x08002657
 80028a8:	08002ea6 	.word	0x08002ea6

080028ac <_printf_common>:
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	4616      	mov	r6, r2
 80028b2:	4698      	mov	r8, r3
 80028b4:	688a      	ldr	r2, [r1, #8]
 80028b6:	690b      	ldr	r3, [r1, #16]
 80028b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028bc:	4293      	cmp	r3, r2
 80028be:	bfb8      	it	lt
 80028c0:	4613      	movlt	r3, r2
 80028c2:	6033      	str	r3, [r6, #0]
 80028c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028c8:	4607      	mov	r7, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	b10a      	cbz	r2, 80028d2 <_printf_common+0x26>
 80028ce:	3301      	adds	r3, #1
 80028d0:	6033      	str	r3, [r6, #0]
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	0699      	lsls	r1, r3, #26
 80028d6:	bf42      	ittt	mi
 80028d8:	6833      	ldrmi	r3, [r6, #0]
 80028da:	3302      	addmi	r3, #2
 80028dc:	6033      	strmi	r3, [r6, #0]
 80028de:	6825      	ldr	r5, [r4, #0]
 80028e0:	f015 0506 	ands.w	r5, r5, #6
 80028e4:	d106      	bne.n	80028f4 <_printf_common+0x48>
 80028e6:	f104 0a19 	add.w	sl, r4, #25
 80028ea:	68e3      	ldr	r3, [r4, #12]
 80028ec:	6832      	ldr	r2, [r6, #0]
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	42ab      	cmp	r3, r5
 80028f2:	dc26      	bgt.n	8002942 <_printf_common+0x96>
 80028f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	3b00      	subs	r3, #0
 80028fc:	bf18      	it	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	0692      	lsls	r2, r2, #26
 8002902:	d42b      	bmi.n	800295c <_printf_common+0xb0>
 8002904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002908:	4641      	mov	r1, r8
 800290a:	4638      	mov	r0, r7
 800290c:	47c8      	blx	r9
 800290e:	3001      	adds	r0, #1
 8002910:	d01e      	beq.n	8002950 <_printf_common+0xa4>
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	6922      	ldr	r2, [r4, #16]
 8002916:	f003 0306 	and.w	r3, r3, #6
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf02      	ittt	eq
 800291e:	68e5      	ldreq	r5, [r4, #12]
 8002920:	6833      	ldreq	r3, [r6, #0]
 8002922:	1aed      	subeq	r5, r5, r3
 8002924:	68a3      	ldr	r3, [r4, #8]
 8002926:	bf0c      	ite	eq
 8002928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800292c:	2500      	movne	r5, #0
 800292e:	4293      	cmp	r3, r2
 8002930:	bfc4      	itt	gt
 8002932:	1a9b      	subgt	r3, r3, r2
 8002934:	18ed      	addgt	r5, r5, r3
 8002936:	2600      	movs	r6, #0
 8002938:	341a      	adds	r4, #26
 800293a:	42b5      	cmp	r5, r6
 800293c:	d11a      	bne.n	8002974 <_printf_common+0xc8>
 800293e:	2000      	movs	r0, #0
 8002940:	e008      	b.n	8002954 <_printf_common+0xa8>
 8002942:	2301      	movs	r3, #1
 8002944:	4652      	mov	r2, sl
 8002946:	4641      	mov	r1, r8
 8002948:	4638      	mov	r0, r7
 800294a:	47c8      	blx	r9
 800294c:	3001      	adds	r0, #1
 800294e:	d103      	bne.n	8002958 <_printf_common+0xac>
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002958:	3501      	adds	r5, #1
 800295a:	e7c6      	b.n	80028ea <_printf_common+0x3e>
 800295c:	18e1      	adds	r1, r4, r3
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	2030      	movs	r0, #48	@ 0x30
 8002962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002966:	4422      	add	r2, r4
 8002968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800296c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002970:	3302      	adds	r3, #2
 8002972:	e7c7      	b.n	8002904 <_printf_common+0x58>
 8002974:	2301      	movs	r3, #1
 8002976:	4622      	mov	r2, r4
 8002978:	4641      	mov	r1, r8
 800297a:	4638      	mov	r0, r7
 800297c:	47c8      	blx	r9
 800297e:	3001      	adds	r0, #1
 8002980:	d0e6      	beq.n	8002950 <_printf_common+0xa4>
 8002982:	3601      	adds	r6, #1
 8002984:	e7d9      	b.n	800293a <_printf_common+0x8e>
	...

08002988 <_printf_i>:
 8002988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	7e0f      	ldrb	r7, [r1, #24]
 800298e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002990:	2f78      	cmp	r7, #120	@ 0x78
 8002992:	4691      	mov	r9, r2
 8002994:	4680      	mov	r8, r0
 8002996:	460c      	mov	r4, r1
 8002998:	469a      	mov	sl, r3
 800299a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800299e:	d807      	bhi.n	80029b0 <_printf_i+0x28>
 80029a0:	2f62      	cmp	r7, #98	@ 0x62
 80029a2:	d80a      	bhi.n	80029ba <_printf_i+0x32>
 80029a4:	2f00      	cmp	r7, #0
 80029a6:	f000 80d2 	beq.w	8002b4e <_printf_i+0x1c6>
 80029aa:	2f58      	cmp	r7, #88	@ 0x58
 80029ac:	f000 80b9 	beq.w	8002b22 <_printf_i+0x19a>
 80029b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029b8:	e03a      	b.n	8002a30 <_printf_i+0xa8>
 80029ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029be:	2b15      	cmp	r3, #21
 80029c0:	d8f6      	bhi.n	80029b0 <_printf_i+0x28>
 80029c2:	a101      	add	r1, pc, #4	@ (adr r1, 80029c8 <_printf_i+0x40>)
 80029c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029c8:	08002a21 	.word	0x08002a21
 80029cc:	08002a35 	.word	0x08002a35
 80029d0:	080029b1 	.word	0x080029b1
 80029d4:	080029b1 	.word	0x080029b1
 80029d8:	080029b1 	.word	0x080029b1
 80029dc:	080029b1 	.word	0x080029b1
 80029e0:	08002a35 	.word	0x08002a35
 80029e4:	080029b1 	.word	0x080029b1
 80029e8:	080029b1 	.word	0x080029b1
 80029ec:	080029b1 	.word	0x080029b1
 80029f0:	080029b1 	.word	0x080029b1
 80029f4:	08002b35 	.word	0x08002b35
 80029f8:	08002a5f 	.word	0x08002a5f
 80029fc:	08002aef 	.word	0x08002aef
 8002a00:	080029b1 	.word	0x080029b1
 8002a04:	080029b1 	.word	0x080029b1
 8002a08:	08002b57 	.word	0x08002b57
 8002a0c:	080029b1 	.word	0x080029b1
 8002a10:	08002a5f 	.word	0x08002a5f
 8002a14:	080029b1 	.word	0x080029b1
 8002a18:	080029b1 	.word	0x080029b1
 8002a1c:	08002af7 	.word	0x08002af7
 8002a20:	6833      	ldr	r3, [r6, #0]
 8002a22:	1d1a      	adds	r2, r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6032      	str	r2, [r6, #0]
 8002a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a30:	2301      	movs	r3, #1
 8002a32:	e09d      	b.n	8002b70 <_printf_i+0x1e8>
 8002a34:	6833      	ldr	r3, [r6, #0]
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	1d19      	adds	r1, r3, #4
 8002a3a:	6031      	str	r1, [r6, #0]
 8002a3c:	0606      	lsls	r6, r0, #24
 8002a3e:	d501      	bpl.n	8002a44 <_printf_i+0xbc>
 8002a40:	681d      	ldr	r5, [r3, #0]
 8002a42:	e003      	b.n	8002a4c <_printf_i+0xc4>
 8002a44:	0645      	lsls	r5, r0, #25
 8002a46:	d5fb      	bpl.n	8002a40 <_printf_i+0xb8>
 8002a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a4c:	2d00      	cmp	r5, #0
 8002a4e:	da03      	bge.n	8002a58 <_printf_i+0xd0>
 8002a50:	232d      	movs	r3, #45	@ 0x2d
 8002a52:	426d      	negs	r5, r5
 8002a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a58:	4859      	ldr	r0, [pc, #356]	@ (8002bc0 <_printf_i+0x238>)
 8002a5a:	230a      	movs	r3, #10
 8002a5c:	e011      	b.n	8002a82 <_printf_i+0xfa>
 8002a5e:	6821      	ldr	r1, [r4, #0]
 8002a60:	6833      	ldr	r3, [r6, #0]
 8002a62:	0608      	lsls	r0, r1, #24
 8002a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a68:	d402      	bmi.n	8002a70 <_printf_i+0xe8>
 8002a6a:	0649      	lsls	r1, r1, #25
 8002a6c:	bf48      	it	mi
 8002a6e:	b2ad      	uxthmi	r5, r5
 8002a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a72:	4853      	ldr	r0, [pc, #332]	@ (8002bc0 <_printf_i+0x238>)
 8002a74:	6033      	str	r3, [r6, #0]
 8002a76:	bf14      	ite	ne
 8002a78:	230a      	movne	r3, #10
 8002a7a:	2308      	moveq	r3, #8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a82:	6866      	ldr	r6, [r4, #4]
 8002a84:	60a6      	str	r6, [r4, #8]
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	bfa2      	ittt	ge
 8002a8a:	6821      	ldrge	r1, [r4, #0]
 8002a8c:	f021 0104 	bicge.w	r1, r1, #4
 8002a90:	6021      	strge	r1, [r4, #0]
 8002a92:	b90d      	cbnz	r5, 8002a98 <_printf_i+0x110>
 8002a94:	2e00      	cmp	r6, #0
 8002a96:	d04b      	beq.n	8002b30 <_printf_i+0x1a8>
 8002a98:	4616      	mov	r6, r2
 8002a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8002aa2:	5dc7      	ldrb	r7, [r0, r7]
 8002aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002aa8:	462f      	mov	r7, r5
 8002aaa:	42bb      	cmp	r3, r7
 8002aac:	460d      	mov	r5, r1
 8002aae:	d9f4      	bls.n	8002a9a <_printf_i+0x112>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d10b      	bne.n	8002acc <_printf_i+0x144>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	07df      	lsls	r7, r3, #31
 8002ab8:	d508      	bpl.n	8002acc <_printf_i+0x144>
 8002aba:	6923      	ldr	r3, [r4, #16]
 8002abc:	6861      	ldr	r1, [r4, #4]
 8002abe:	4299      	cmp	r1, r3
 8002ac0:	bfde      	ittt	le
 8002ac2:	2330      	movle	r3, #48	@ 0x30
 8002ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002acc:	1b92      	subs	r2, r2, r6
 8002ace:	6122      	str	r2, [r4, #16]
 8002ad0:	f8cd a000 	str.w	sl, [sp]
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	aa03      	add	r2, sp, #12
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4640      	mov	r0, r8
 8002adc:	f7ff fee6 	bl	80028ac <_printf_common>
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d14a      	bne.n	8002b7a <_printf_i+0x1f2>
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	b004      	add	sp, #16
 8002aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	f043 0320 	orr.w	r3, r3, #32
 8002af4:	6023      	str	r3, [r4, #0]
 8002af6:	4833      	ldr	r0, [pc, #204]	@ (8002bc4 <_printf_i+0x23c>)
 8002af8:	2778      	movs	r7, #120	@ 0x78
 8002afa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	6831      	ldr	r1, [r6, #0]
 8002b02:	061f      	lsls	r7, r3, #24
 8002b04:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b08:	d402      	bmi.n	8002b10 <_printf_i+0x188>
 8002b0a:	065f      	lsls	r7, r3, #25
 8002b0c:	bf48      	it	mi
 8002b0e:	b2ad      	uxthmi	r5, r5
 8002b10:	6031      	str	r1, [r6, #0]
 8002b12:	07d9      	lsls	r1, r3, #31
 8002b14:	bf44      	itt	mi
 8002b16:	f043 0320 	orrmi.w	r3, r3, #32
 8002b1a:	6023      	strmi	r3, [r4, #0]
 8002b1c:	b11d      	cbz	r5, 8002b26 <_printf_i+0x19e>
 8002b1e:	2310      	movs	r3, #16
 8002b20:	e7ac      	b.n	8002a7c <_printf_i+0xf4>
 8002b22:	4827      	ldr	r0, [pc, #156]	@ (8002bc0 <_printf_i+0x238>)
 8002b24:	e7e9      	b.n	8002afa <_printf_i+0x172>
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f023 0320 	bic.w	r3, r3, #32
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	e7f6      	b.n	8002b1e <_printf_i+0x196>
 8002b30:	4616      	mov	r6, r2
 8002b32:	e7bd      	b.n	8002ab0 <_printf_i+0x128>
 8002b34:	6833      	ldr	r3, [r6, #0]
 8002b36:	6825      	ldr	r5, [r4, #0]
 8002b38:	6961      	ldr	r1, [r4, #20]
 8002b3a:	1d18      	adds	r0, r3, #4
 8002b3c:	6030      	str	r0, [r6, #0]
 8002b3e:	062e      	lsls	r6, r5, #24
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	d501      	bpl.n	8002b48 <_printf_i+0x1c0>
 8002b44:	6019      	str	r1, [r3, #0]
 8002b46:	e002      	b.n	8002b4e <_printf_i+0x1c6>
 8002b48:	0668      	lsls	r0, r5, #25
 8002b4a:	d5fb      	bpl.n	8002b44 <_printf_i+0x1bc>
 8002b4c:	8019      	strh	r1, [r3, #0]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	6123      	str	r3, [r4, #16]
 8002b52:	4616      	mov	r6, r2
 8002b54:	e7bc      	b.n	8002ad0 <_printf_i+0x148>
 8002b56:	6833      	ldr	r3, [r6, #0]
 8002b58:	1d1a      	adds	r2, r3, #4
 8002b5a:	6032      	str	r2, [r6, #0]
 8002b5c:	681e      	ldr	r6, [r3, #0]
 8002b5e:	6862      	ldr	r2, [r4, #4]
 8002b60:	2100      	movs	r1, #0
 8002b62:	4630      	mov	r0, r6
 8002b64:	f7fd fb3c 	bl	80001e0 <memchr>
 8002b68:	b108      	cbz	r0, 8002b6e <_printf_i+0x1e6>
 8002b6a:	1b80      	subs	r0, r0, r6
 8002b6c:	6060      	str	r0, [r4, #4]
 8002b6e:	6863      	ldr	r3, [r4, #4]
 8002b70:	6123      	str	r3, [r4, #16]
 8002b72:	2300      	movs	r3, #0
 8002b74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b78:	e7aa      	b.n	8002ad0 <_printf_i+0x148>
 8002b7a:	6923      	ldr	r3, [r4, #16]
 8002b7c:	4632      	mov	r2, r6
 8002b7e:	4649      	mov	r1, r9
 8002b80:	4640      	mov	r0, r8
 8002b82:	47d0      	blx	sl
 8002b84:	3001      	adds	r0, #1
 8002b86:	d0ad      	beq.n	8002ae4 <_printf_i+0x15c>
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	079b      	lsls	r3, r3, #30
 8002b8c:	d413      	bmi.n	8002bb6 <_printf_i+0x22e>
 8002b8e:	68e0      	ldr	r0, [r4, #12]
 8002b90:	9b03      	ldr	r3, [sp, #12]
 8002b92:	4298      	cmp	r0, r3
 8002b94:	bfb8      	it	lt
 8002b96:	4618      	movlt	r0, r3
 8002b98:	e7a6      	b.n	8002ae8 <_printf_i+0x160>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	4632      	mov	r2, r6
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	4640      	mov	r0, r8
 8002ba2:	47d0      	blx	sl
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	d09d      	beq.n	8002ae4 <_printf_i+0x15c>
 8002ba8:	3501      	adds	r5, #1
 8002baa:	68e3      	ldr	r3, [r4, #12]
 8002bac:	9903      	ldr	r1, [sp, #12]
 8002bae:	1a5b      	subs	r3, r3, r1
 8002bb0:	42ab      	cmp	r3, r5
 8002bb2:	dcf2      	bgt.n	8002b9a <_printf_i+0x212>
 8002bb4:	e7eb      	b.n	8002b8e <_printf_i+0x206>
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	f104 0619 	add.w	r6, r4, #25
 8002bbc:	e7f5      	b.n	8002baa <_printf_i+0x222>
 8002bbe:	bf00      	nop
 8002bc0:	08002eb1 	.word	0x08002eb1
 8002bc4:	08002ec2 	.word	0x08002ec2

08002bc8 <__sflush_r>:
 8002bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd0:	0716      	lsls	r6, r2, #28
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	d454      	bmi.n	8002c82 <__sflush_r+0xba>
 8002bd8:	684b      	ldr	r3, [r1, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	dc02      	bgt.n	8002be4 <__sflush_r+0x1c>
 8002bde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	dd48      	ble.n	8002c76 <__sflush_r+0xae>
 8002be4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002be6:	2e00      	cmp	r6, #0
 8002be8:	d045      	beq.n	8002c76 <__sflush_r+0xae>
 8002bea:	2300      	movs	r3, #0
 8002bec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002bf0:	682f      	ldr	r7, [r5, #0]
 8002bf2:	6a21      	ldr	r1, [r4, #32]
 8002bf4:	602b      	str	r3, [r5, #0]
 8002bf6:	d030      	beq.n	8002c5a <__sflush_r+0x92>
 8002bf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	0759      	lsls	r1, r3, #29
 8002bfe:	d505      	bpl.n	8002c0c <__sflush_r+0x44>
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c06:	b10b      	cbz	r3, 8002c0c <__sflush_r+0x44>
 8002c08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c10:	6a21      	ldr	r1, [r4, #32]
 8002c12:	4628      	mov	r0, r5
 8002c14:	47b0      	blx	r6
 8002c16:	1c43      	adds	r3, r0, #1
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	d106      	bne.n	8002c2a <__sflush_r+0x62>
 8002c1c:	6829      	ldr	r1, [r5, #0]
 8002c1e:	291d      	cmp	r1, #29
 8002c20:	d82b      	bhi.n	8002c7a <__sflush_r+0xb2>
 8002c22:	4a2a      	ldr	r2, [pc, #168]	@ (8002ccc <__sflush_r+0x104>)
 8002c24:	410a      	asrs	r2, r1
 8002c26:	07d6      	lsls	r6, r2, #31
 8002c28:	d427      	bmi.n	8002c7a <__sflush_r+0xb2>
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	6062      	str	r2, [r4, #4]
 8002c2e:	04d9      	lsls	r1, r3, #19
 8002c30:	6922      	ldr	r2, [r4, #16]
 8002c32:	6022      	str	r2, [r4, #0]
 8002c34:	d504      	bpl.n	8002c40 <__sflush_r+0x78>
 8002c36:	1c42      	adds	r2, r0, #1
 8002c38:	d101      	bne.n	8002c3e <__sflush_r+0x76>
 8002c3a:	682b      	ldr	r3, [r5, #0]
 8002c3c:	b903      	cbnz	r3, 8002c40 <__sflush_r+0x78>
 8002c3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c42:	602f      	str	r7, [r5, #0]
 8002c44:	b1b9      	cbz	r1, 8002c76 <__sflush_r+0xae>
 8002c46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c4a:	4299      	cmp	r1, r3
 8002c4c:	d002      	beq.n	8002c54 <__sflush_r+0x8c>
 8002c4e:	4628      	mov	r0, r5
 8002c50:	f7ff fbf2 	bl	8002438 <_free_r>
 8002c54:	2300      	movs	r3, #0
 8002c56:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c58:	e00d      	b.n	8002c76 <__sflush_r+0xae>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	47b0      	blx	r6
 8002c60:	4602      	mov	r2, r0
 8002c62:	1c50      	adds	r0, r2, #1
 8002c64:	d1c9      	bne.n	8002bfa <__sflush_r+0x32>
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0c6      	beq.n	8002bfa <__sflush_r+0x32>
 8002c6c:	2b1d      	cmp	r3, #29
 8002c6e:	d001      	beq.n	8002c74 <__sflush_r+0xac>
 8002c70:	2b16      	cmp	r3, #22
 8002c72:	d11e      	bne.n	8002cb2 <__sflush_r+0xea>
 8002c74:	602f      	str	r7, [r5, #0]
 8002c76:	2000      	movs	r0, #0
 8002c78:	e022      	b.n	8002cc0 <__sflush_r+0xf8>
 8002c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	e01b      	b.n	8002cba <__sflush_r+0xf2>
 8002c82:	690f      	ldr	r7, [r1, #16]
 8002c84:	2f00      	cmp	r7, #0
 8002c86:	d0f6      	beq.n	8002c76 <__sflush_r+0xae>
 8002c88:	0793      	lsls	r3, r2, #30
 8002c8a:	680e      	ldr	r6, [r1, #0]
 8002c8c:	bf08      	it	eq
 8002c8e:	694b      	ldreq	r3, [r1, #20]
 8002c90:	600f      	str	r7, [r1, #0]
 8002c92:	bf18      	it	ne
 8002c94:	2300      	movne	r3, #0
 8002c96:	eba6 0807 	sub.w	r8, r6, r7
 8002c9a:	608b      	str	r3, [r1, #8]
 8002c9c:	f1b8 0f00 	cmp.w	r8, #0
 8002ca0:	dde9      	ble.n	8002c76 <__sflush_r+0xae>
 8002ca2:	6a21      	ldr	r1, [r4, #32]
 8002ca4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002ca6:	4643      	mov	r3, r8
 8002ca8:	463a      	mov	r2, r7
 8002caa:	4628      	mov	r0, r5
 8002cac:	47b0      	blx	r6
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	dc08      	bgt.n	8002cc4 <__sflush_r+0xfc>
 8002cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cc4:	4407      	add	r7, r0
 8002cc6:	eba8 0800 	sub.w	r8, r8, r0
 8002cca:	e7e7      	b.n	8002c9c <__sflush_r+0xd4>
 8002ccc:	dfbffffe 	.word	0xdfbffffe

08002cd0 <_fflush_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	690b      	ldr	r3, [r1, #16]
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	b913      	cbnz	r3, 8002ce0 <_fflush_r+0x10>
 8002cda:	2500      	movs	r5, #0
 8002cdc:	4628      	mov	r0, r5
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
 8002ce0:	b118      	cbz	r0, 8002cea <_fflush_r+0x1a>
 8002ce2:	6a03      	ldr	r3, [r0, #32]
 8002ce4:	b90b      	cbnz	r3, 8002cea <_fflush_r+0x1a>
 8002ce6:	f7ff f9ad 	bl	8002044 <__sinit>
 8002cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f3      	beq.n	8002cda <_fflush_r+0xa>
 8002cf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002cf4:	07d0      	lsls	r0, r2, #31
 8002cf6:	d404      	bmi.n	8002d02 <_fflush_r+0x32>
 8002cf8:	0599      	lsls	r1, r3, #22
 8002cfa:	d402      	bmi.n	8002d02 <_fflush_r+0x32>
 8002cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cfe:	f7ff fb98 	bl	8002432 <__retarget_lock_acquire_recursive>
 8002d02:	4628      	mov	r0, r5
 8002d04:	4621      	mov	r1, r4
 8002d06:	f7ff ff5f 	bl	8002bc8 <__sflush_r>
 8002d0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d0c:	07da      	lsls	r2, r3, #31
 8002d0e:	4605      	mov	r5, r0
 8002d10:	d4e4      	bmi.n	8002cdc <_fflush_r+0xc>
 8002d12:	89a3      	ldrh	r3, [r4, #12]
 8002d14:	059b      	lsls	r3, r3, #22
 8002d16:	d4e1      	bmi.n	8002cdc <_fflush_r+0xc>
 8002d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d1a:	f7ff fb8b 	bl	8002434 <__retarget_lock_release_recursive>
 8002d1e:	e7dd      	b.n	8002cdc <_fflush_r+0xc>

08002d20 <__swhatbuf_r>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	460c      	mov	r4, r1
 8002d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	b096      	sub	sp, #88	@ 0x58
 8002d2c:	4615      	mov	r5, r2
 8002d2e:	461e      	mov	r6, r3
 8002d30:	da0d      	bge.n	8002d4e <__swhatbuf_r+0x2e>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2340      	movne	r3, #64	@ 0x40
 8002d40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002d44:	2000      	movs	r0, #0
 8002d46:	6031      	str	r1, [r6, #0]
 8002d48:	602b      	str	r3, [r5, #0]
 8002d4a:	b016      	add	sp, #88	@ 0x58
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	466a      	mov	r2, sp
 8002d50:	f000 f848 	bl	8002de4 <_fstat_r>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	dbec      	blt.n	8002d32 <__swhatbuf_r+0x12>
 8002d58:	9901      	ldr	r1, [sp, #4]
 8002d5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002d5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002d62:	4259      	negs	r1, r3
 8002d64:	4159      	adcs	r1, r3
 8002d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d6a:	e7eb      	b.n	8002d44 <__swhatbuf_r+0x24>

08002d6c <__smakebuf_r>:
 8002d6c:	898b      	ldrh	r3, [r1, #12]
 8002d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d70:	079d      	lsls	r5, r3, #30
 8002d72:	4606      	mov	r6, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	d507      	bpl.n	8002d88 <__smakebuf_r+0x1c>
 8002d78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	6123      	str	r3, [r4, #16]
 8002d80:	2301      	movs	r3, #1
 8002d82:	6163      	str	r3, [r4, #20]
 8002d84:	b003      	add	sp, #12
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d88:	ab01      	add	r3, sp, #4
 8002d8a:	466a      	mov	r2, sp
 8002d8c:	f7ff ffc8 	bl	8002d20 <__swhatbuf_r>
 8002d90:	9f00      	ldr	r7, [sp, #0]
 8002d92:	4605      	mov	r5, r0
 8002d94:	4639      	mov	r1, r7
 8002d96:	4630      	mov	r0, r6
 8002d98:	f7ff fbba 	bl	8002510 <_malloc_r>
 8002d9c:	b948      	cbnz	r0, 8002db2 <__smakebuf_r+0x46>
 8002d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002da2:	059a      	lsls	r2, r3, #22
 8002da4:	d4ee      	bmi.n	8002d84 <__smakebuf_r+0x18>
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	81a3      	strh	r3, [r4, #12]
 8002db0:	e7e2      	b.n	8002d78 <__smakebuf_r+0xc>
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	6020      	str	r0, [r4, #0]
 8002db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dba:	81a3      	strh	r3, [r4, #12]
 8002dbc:	9b01      	ldr	r3, [sp, #4]
 8002dbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002dc2:	b15b      	cbz	r3, 8002ddc <__smakebuf_r+0x70>
 8002dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f000 f81d 	bl	8002e08 <_isatty_r>
 8002dce:	b128      	cbz	r0, 8002ddc <__smakebuf_r+0x70>
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	81a3      	strh	r3, [r4, #12]
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	431d      	orrs	r5, r3
 8002de0:	81a5      	strh	r5, [r4, #12]
 8002de2:	e7cf      	b.n	8002d84 <__smakebuf_r+0x18>

08002de4 <_fstat_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4d07      	ldr	r5, [pc, #28]	@ (8002e04 <_fstat_r+0x20>)
 8002de8:	2300      	movs	r3, #0
 8002dea:	4604      	mov	r4, r0
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	602b      	str	r3, [r5, #0]
 8002df2:	f7fd fdb5 	bl	8000960 <_fstat>
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	d102      	bne.n	8002e00 <_fstat_r+0x1c>
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	b103      	cbz	r3, 8002e00 <_fstat_r+0x1c>
 8002dfe:	6023      	str	r3, [r4, #0]
 8002e00:	bd38      	pop	{r3, r4, r5, pc}
 8002e02:	bf00      	nop
 8002e04:	20000220 	.word	0x20000220

08002e08 <_isatty_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4d06      	ldr	r5, [pc, #24]	@ (8002e24 <_isatty_r+0x1c>)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4608      	mov	r0, r1
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	f7fd fdb4 	bl	8000980 <_isatty>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_isatty_r+0x1a>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_isatty_r+0x1a>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	20000220 	.word	0x20000220

08002e28 <_sbrk_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4d06      	ldr	r5, [pc, #24]	@ (8002e44 <_sbrk_r+0x1c>)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	602b      	str	r3, [r5, #0]
 8002e34:	f7fd fdbc 	bl	80009b0 <_sbrk>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d102      	bne.n	8002e42 <_sbrk_r+0x1a>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	b103      	cbz	r3, 8002e42 <_sbrk_r+0x1a>
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	20000220 	.word	0x20000220

08002e48 <_init>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr

08002e54 <_fini>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr
